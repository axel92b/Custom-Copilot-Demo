import { BrandVariants } from '@fluentui/react-components';

/**
 * @description Item metadata properties that are necessary to render the favorite item
 * @deprecated Use FavoriteStubItemV2, which supports third-party Fabric items, instead.
 */
interface FavoriteStubItem {
    /**
     * @description The object id of the item
     */
    objectId: string;
    /**
     * @description The display name of the item
     */
    displayName: string;
    /**
     * @description The object id of the folder to which the item belongs
     */
    folderObjectId: string;
    /**
     * @description The type of the item
     */
    itemType: FabricItemType;
    /**
     * @description The core permissions the user has on the current item
     */
    permissions?: number | null;
    /**
     * @description The system item type marker
     */
    systemItemType?: string;
}
/**
 * @description Item metadata properties that are necessary to render the favorite item
 */
interface FavoriteStubItemV2 extends Omit<FavoriteStubItem, 'itemType'> {
    /**
     * @description The type of the item
     */
    itemType: FabricItemTypeV2;
}

/**
 * @description Item metadata properties that are necessary to render the recent item
 * @deprecated Use RecentStubItemV2, which supports third-party Fabric items, instead.
 */
interface RecentStubItem {
    /**
     * @description The object id of the item
     */
    objectId: string;
    /**
     * @description The display name of the item
     */
    displayName: string;
    /**
     * @description The object id of the folder to which the item belongs
     */
    folderObjectId: string;
    /**
     * @description The type of the item
     */
    itemType: FabricItemType;
    /**
     * @description The item owner
     */
    ownerUser: User;
    /**
     * @description The core permissions the user has on the current item
     */
    permissions?: number | null;
    /**
     * @description The system item type marker
     */
    systemItemType?: string;
}
/**
 * @description Item metadata properties that are necessary to render the recent item
 */
interface RecentStubItemV2 extends Omit<RecentStubItem, 'itemType'> {
    itemType: FabricItemTypeV2;
}

/**
 * @description An array of all valid Power BI item types.
 */
declare const PowerBiItemTypes: readonly ["dashboard", "dataflow", "dataflow-gen2", "datamart", "dataset", "dataset-autogenerated", "data-warehouse", "lake-warehouse", "mounted-warehouse", "rdlreport", "report", "scorecard", "streaming-dataflow", "streaming-model", "workbook"];
/**
 * @description Power BI item type
 */
type PowerBiItemType = typeof PowerBiItemTypes[number];
/**
 * @description
 * An array of all valid simulated item types. The concepts in this array are not necessarily items. We need this type primarily to make it easie for concepts
 * that are not items to be rendered using existing item rendering logic. For example, the workspace list view was originally designed to render items. The
 * subfolder is not an item, but defining the subfolder as SimulatedItemType makes it easy to render into the workspace list.
 */
declare const SimulatedItemTypes: readonly ["app", "workspace", "alm-pipeline", "tile", "unknown", "metric", "semantic-metric", "subfolder", "function"];
/**
 * @description Simulated item type
 */
type SimulatedItemType = typeof SimulatedItemTypes[number];
/**
 * @description A union type of all valid Power BI item types and simulated item types
 */
type ExtendedPbiItemType = PowerBiItemType | SimulatedItemType;
/**
 * @description A union type of all valid Power BI item types, simulated item types and Fabric first-party item types
 * @deprecated Use ExtendedItemTypeV2, which supports third-party Fabric items, instead.
 */
type ExtendedItemType = ExtendedPbiItemType | FabricItemType;
/**
 * @description A union type of all valid Power BI item types, simulated item types and Fabric item types
 */
type ExtendedItemTypeV2 = ExtendedPbiItemType | FabricItemTypeV2;
/**
 * @description An array of all valid Fabric first-party item types.
 */
declare const FabricItemTypes: readonly ["CopyJob", "DatabricksCatalog", "DataExploration", "DataflowFabric", "DataManagerForAgriculture", "DigitalOperationsOperationalInsight", "Environment", "EventStream", "EventDefinition", "ExternalFunctions", "FunctionSet", "GraphIndex", "GraphQL", "HealthDataManager", "HLSCohort", "HomeOne", "KustoDashboard", "KustoDatabase", "KustoEventHouse", "KustoEventHubDataConnection", "KustoQueryWorkbench", "Lakehouse", "LinkedService", "LLMPlugin", "MetricSet", "MicrosoftSupplyChainCenter", "MLExperiment", "MLModel", "MountedDataFactory", "MountedRelationalDatabase", "OrgApp", "PgSQLDbNative", "Pipeline", "ApacheAirflowProject", "ReflexProject", "RetailDataManager", "SparkJobDefinition", "SqlAnalyticsEndpoint", "SQLDbNative", "SustainabilityDataManager", "SynapseNotebook", "TestItem", "Warehouse", "Variables"];
/**
 * @description Fabric item type built by first-party developers
 * @deprecated Use FabricItemTypeV2, which supports third-party Fabric items, instead.
 */
type FabricItemType = typeof FabricItemTypes[number];
/**
 * @description Fabric item type built by first-party or third-party developers
 */
type FabricItemTypeV2 = typeof FabricItemTypes[number] | string;
/**
 * @description A union type of all valid Power BI item types and Fabric first-party item types
 * @deprecated Use ItemTypeV2, which supports third-party Fabric items, instead.
 */
type ItemType = PowerBiItemType | FabricItemType;
/**
 * @description A union type of all valid Power BI item types and Fabric item types
 */
type ItemTypeV2 = PowerBiItemType | FabricItemTypeV2;
/**
 * @description An enum of all valid provision states
 */
declare enum ProvisionStateEnum {
    InProgress = 0,
    Active = 1,
    Failed = 20,
    Deleting = 21,
    DisabledByDeprovisioning = 30,
    DeprovisioningFailed = 31,
    DeletedByDeprovision = 32
}
/**
 * @description A type representing a valid provision state
 */
type ProvisionState = keyof typeof ProvisionStateEnum;
/**
 * @description An enum of all valid payload content types
 */
declare enum PayloadContentTypeEnum {
    InlineJson = 0,
    InlinePlainText = 1,
    InlineXml = 2,
    InlineBase64 = 3
}
/**
 * @description A type representing a valid payload content type
 */
type PayloadContentType = keyof typeof PayloadContentTypeEnum;
/**
 * @description An interface representing a user
 */
interface User {
    /**
     * @description The numeric id of the user
     */
    id: number;
    /**
     * @description The display name of the user
     */
    name: string;
    /**
     * @description The user object id
     */
    objectId: string;
    /**
     * @description The user principal name
     */
    userPrincipalName: string;
}
/**
 * @description An interface representing Fabric first-party item metadata
 * @deprecated Use ItemV2, which supports third-party Fabric items, instead.
 */
interface Item {
    /**
     * @description The object id of the item
     */
    objectId: string;
    /**
     * @description The type of the item
     */
    itemType: FabricItemType;
    /**
     * @description The display name of the item
     */
    displayName: string;
    /**
     * @description The description of the item
     */
    description: string;
    /**
     * @description The object id of the folder to which the item belongs
     */
    folderObjectId: string;
    /**
     * @description The provision state of the item
     */
    provisionState: ProvisionState;
    /**
     * @description The last update date of the item
     */
    lastUpdatedDate: Date;
    /**
     * @description The object id of the capacity to which the item belongs
     */
    capacityObjectId: string;
    /**
     * @description The workload payload of the item
     */
    workloadPayload?: string;
    /**
     * @description The content type of the workload payload
     */
    payloadContentType?: PayloadContentType;
    /**
     * @description The extended properties of the item
     */
    extendedProperties?: Record<string, unknown>;
    /**
     * @description The creation date of the item
     */
    createdDate?: Date;
    /**
     * @description The numeric id of the item owner
     */
    ownerUserId?: number;
    /**
     * @description The item creator
     */
    createdByUser?: User;
    /**
     * @description The numeric id of the item creator
     */
    createdByUserId?: number;
    /**
     * @description The item modifier
     */
    modifiedByUser?: User;
    /**
     * @description The numeric id of the item modifier
     */
    modifiedByUserId?: number;
    /**
     * @description The item owner
     */
    ownerUser?: User;
    /**
     * @description Relations with other Fabric items
     */
    itemRelations?: ItemRelation[];
    /**
     * @description Relations with datasets
     */
    datasetRelations?: PBIItemRelation[];
    /**
     * @description Relations with dataflows
     */
    dataflowRelations?: PBIItemRelation[];
    /**
     * @description Relations with datamarts
     */
    datamartRelations?: PBIItemRelation[];
    /**
     * @description The core permissions the user has on the current item
     */
    permissions?: number;
    /**
     * @description The customized permissions the user has on the current item
     */
    itemPermissions?: number;
    /**
     * @description The id of the subfolder to which the item belongs
     */
    subfolderId?: number;
    /**
     * @description The object id of the parent item of the current item
     */
    parentItemObjectId?: string;
    /**
     * @description The system item type marker
     */
    systemItemType?: string;
    /**
     * @description The marker if the item has a DLP Policy Tips
     */
    dlpPolicyTip?: DlpPolicyTip;
}
/**
 * @description An interface representing existance of DLP Policy Tip
 */
interface DlpPolicyTip {
    /**
     * @description The date when the policy tip created
     */
    createdDate: string;
    /**
     * @description The date when the policy tip last updated
     */
    lastUpdatedDate: string;
}
/**
 * @description An interface representing a relation between Fabric items
 */
interface ItemRelation {
    /**
     * @description The object id of the dependent item
     */
    dependentItemObjectId: string;
    /**
     * @description The relation settings between items
     */
    settings: ItemRelationSettings;
}
/**
 * @description An interface representing a relation between a Fabric item and a dataset
 * @deprecated Use PBIItemRelation instead
 */
interface ItemDatasetRelation {
    /**
     * @description The numeric id of the dependent item
     */
    dependentItemId: number;
    /**
     * @description The object id of the dependent item
     */
    dependentItemObjectId: string;
    /**
     * @description The relation settings between items
     */
    settings: ItemRelationSettings;
}
/**
 * @description Representing a relation between a Fabric item and a classic Power BI item
 */
type PBIItemRelation = ItemDatasetRelation;
/**
 * @description An enum of all valid item relation settings
 */
declare enum ItemRelationSettings {
    Association = 0,
    CascadeDelete = 1,
    WeakAssociation = 2,
    Datasource = 3,
    PushData = 4,
    Orchestration = 5,
    Shortcut = 6,
    HiddenInWorkspace = 7
}
/**
 * @description An interface representing Fabric item metadata
 */
interface ItemV2 extends Omit<Item, 'itemType'> {
    /**
     * @description The type of the item
     */
    itemType: FabricItemTypeV2;
}
/**
 * @description
 * A union type that includes both the full Fabric item metadata and various kinds of partial item metadata, such as Recent and Favorite. These
 * partial metadata types are designed to be used for different rendering purposes without requiring the full item metadata to be fetched.
 */
declare type ItemLikeV2 = ItemV2 | FavoriteStubItemV2 | RecentStubItemV2;
/**
 * @description An interface representing a payload for creating an item
 */
interface CreateItemPayload$1 {
    /**
     * @description The type of the item
     */
    itemType: ItemType;
    /**
     * @description The display name of the item
     */
    displayName: string;
    /**
     * @description The description of the item
     */
    description?: string;
    /**
     * @description The workload payload of the item
     */
    workloadPayload?: string;
    /**
     * @description The content type of the workload payload
     */
    payloadContentType?: PayloadContentType;
    /**
     * @description The extended properties of the item
     */
    extendedProperties?: Record<string, unknown>;
    /**
     * @description The sensitivity label of the item
     */
    sensitivityLabel?: SensitivityLabel;
    /**
    * @description The parent subfolder id.
    */
    subfolderId?: number;
}
/**
 * @description An enum of all methods to apply a label
 */
declare enum TriggerType {
    Manual = 1,
    InheritanceUponCreation = 2,
    Publish = 3,
    DownstreamInheritanceBySystem = 4,
    DownstreamInheritanceByUser = 5,
    InheritanceFromDataSource = 6,
    Alm = 7,
    PublicApiPrivileged = 8,
    PublicApiStandard = 9,
    DefaultLabelPolicy = 10
}
/**
 * @description An interface representing a sensitivity label
 */
interface SensitivityLabel {
    /**
     * @description The label id
     */
    labelId: string;
    /**
     * @description How the label is applied
     */
    triggerType: TriggerType;
    /**
     * @description Whether user asked to apply label on downstream items
     */
    triggerUserDownstreamInheritance: boolean;
}
/**
 * @description An interface representing the context for creating an item
 */
interface ItemCreateContext {
    /**
     * @description The object id of the workspace to which the item should be created.
     */
    workspaceObjectId: string;
    /**
     * @description The capacity object id of the workspace
     */
    capacityObjectId?: string;
    /**
     * @description The id of the subfolder to which the item should be created.
     */
    subfolderId?: number;
}
/**
 * @description An interface representing the parameters for creating an item
 */
interface CreateItemParams$1 {
    /**
     * @description The object id of the workspace to which the item should be created.
     */
    workspaceObjectId: string;
    /**
     * @description The payload for creating an item
     */
    payload: CreateItemPayload$1;
}
/**
 * @description An interface representing the parameters for getting an item
 */
interface GetItemParams {
    /**
     * @description The object id of the item
     */
    objectId: string;
}
/**
 * @description An interface representing the payload for updating an item
 */
type UpdateItemPayload = Partial<Pick<Item, 'displayName' | 'description' | 'workloadPayload' | 'payloadContentType'>>;
/**
 * @description An interface representing the parameters for updating an item
 */
interface UpdateItemParams {
    /**
     * @description The object id of the item
     */
    objectId: string;
    /**
     * @description The payload for updating an item
     */
    payload: UpdateItemPayload;
    /**
     * @description The current ETag of the item
     */
    etag: string;
}
/**
 * @description An interface representing the parameters for deleting an item
 */
interface DeleteItemParams {
    /**
     * @description The object id of the item
     */
    objectId: string;
}

/**
 * @description A type of all valid schedule types
 */
type ScheduleType = 'None' | 'Weekly' | 'Daily' | 'Minutes' | 'Hourly' | 'Monthly' | 'RelativeMonthly';
/**
 * @description A type of all valid week indices
 */
/**
 * @description A type of all valid weekday when using weekly/daily type schedule
 */
type Weekday = 'Su' | 'Mo' | 'Tu' | 'We' | 'Th' | 'Fr' | 'Sa';
/**
 * @description An interface representing the schedule info of item
 */
interface ItemSchedule {
    /**
     * @description The object id of the item job definition
     */
    jobDefinitionObjectId: string;
    /**
     * @description The object id of the item
     */
    itemObjectId: string;
    /**
     * @description The configured job type
     */
    itemJobType: string;
    /**
     * @description Whether it is enabled
     */
    scheduleEnabled: boolean;
    /**
     * @description The type of schedule
     */
    scheduleType: ScheduleType;
    /**
     * @description The timezone of the schedule start/end time
     */
    localTimeZoneId: string;
    /**
     * @description The weekdays that are selected for scheduling for daily/weekly/monthly schedule type
     */
    scheduleWeekdays: WeekdaysItem[];
    /**
     * @description The period in minutes for cron schedule type
     */
    cronPeriod?: number;
    /**
     * @description The list of time to schedule job for daily/weekly schedule type
     */
    scheduleHours?: string[];
    /**
     * @description The schedule period that is specified for monthly scheduling
     */
    schedulePeriod?: number;
    /**
     * @description The day(s) that are specified for monthly schedule
     */
    scheduleMonthDays?: number[];
    /**
     * @description The week that is specified for monthly schedule with relative monthly option
     */
    scheduleWeekIndex?: number;
    /**
     * @description The time to start the schedule
     */
    scheduleStartTime?: string;
    /**
     * @description The time to stop the schedule
     */
    scheduleEndTime?: string;
    /**
     * @description The timestamp of the next scheduled job to run, calculated based on the time and schedule type
     */
    nextJobScheduleTime?: string;
    /**
     * @description The utc timestamp of the next scheduled job to run, calculated based on the time and schedule type
     */
    nextJobScheduleTimeUtc?: string;
    /**
     * @description The utc timestamp of last update
     */
    lastUpdateTimeUtc?: string;
    /**
     * @description The optional payload that will be passed when starting job
     */
    jobPayloadJson?: string;
}
/**
 * @description An interface representing the selected weekday
 */
interface WeekdaysItem {
    /**
     * @description The weekday
     */
    key: Weekday;
    /**
     * @description Whether it is selected
     */
    selected: boolean;
}
/**
 * @description A type representing a payload for creating an item schedule
 */
type ItemSchedulePayload = Omit<ItemSchedule, 'nextJobScheduleTime' | 'nextJobScheduleTimeUtc' | 'lastUpdateTimeUtc'>;
/**
 * @description An interface representing the payload for running on-demand job
 */
interface RunItemJobPayload {
    /**
     * @description The optional payload that will be passed when starting job
     */
    jobPayloadJson?: string;
}
/**
 * @description An interface representing the parameters for creating an item schedule
 */
interface CreateItemScheduleParams {
    /**
     * @description The object id of the item
     */
    objectId: string;
    /**
     * @description The payload for creating an item schedule
     */
    payload: ItemSchedulePayload;
}
type UpdateItemScheduleParams = CreateItemScheduleParams;
/**
 * @description An interface representing the parameters for running on-demand job
 */
interface RunItemJobParams {
    /**
     * @description The object id of the item
     */
    itemObjectId: string;
    /**
     * @description The type of the item job
     */
    itemJobType: string;
    /**
     * @description The payload for running on-demand job
     */
    payload: RunItemJobPayload;
}
interface ItemJobInstanceBaseParams {
    /**
     * @description The object id of the item
     */
    itemObjectId: string;
    /**
     * @description The object id of the item job
     */
    jobInstanceId: string;
}
/**
 * @description An interface representing the parameters for cancelling a job
 */
type CancelItemJobParams = ItemJobInstanceBaseParams;
type ItemJobStatusName = keyof typeof ItemJobStatus;
/**
 * @description An enum of all valid item job status types
 */
declare enum ItemJobStatus {
    /**
     * @description Job is scheduled or triggered, but not yet started
     */
    NotStarted = 0,
    /**
     * @description Job is running
     */
    InProgress = 1,
    /**
     * @description Job is completed successfully
     */
    Completed = 2,
    /**
     * @description Job is failed because of error
     */
    Failed = 3,
    /**
     * @description Job is cancelled by user
     */
    Cancelled = 4,
    /**
     * @description Job could not be found
     */
    NotFound = 5,
    /**
     * @description Job is duplicated
     */
    Duplicate = 6,
    OwnerUserMissing = 7,
    /**
     * @description Job is marked as Deadletter if not started after trigger for N hours
     */
    DeadLettered = 8,
    /**
     * @description This status is used for backwards compatibility and never set
     */
    Unknown = 9
}
/**
 * @description An interface representing single job instance
 */
interface ItemJobInstance {
    /**
     * @description The object id of the item job
     */
    itemJobInstanceId: string;
    /**
     * @description The numeric id of the item
     */
    itemId: number;
    /**
     * @description The object id of the item
     */
    itemObjectId: string;
    /**
     * @description The type of the item job
     */
    itemJobType: string;
    /**
     * @description The status of the item job
     */
    status: ItemJobStatus | ItemJobStatusName;
    /**
     * @description The string representation of status
     */
    statusString: string;
    /**
     * @description Whether the job is successful
     */
    isSuccessful: boolean;
    /**
     * @description The utc timestamp of the job is scheduled or triggered
     */
    jobScheduleTimeUtc: string;
    /**
     * @description The utc timestamp of the job actually started, reported by workload
     */
    jobStartTimeUtc: string;
    /**
     * @description The utc timestamp of the job succeeded or failed
     */
    jobEndTimeUtc: string;
}
/**
 * @description An interface representing the job history list of single item
 */
interface ItemJobHistory {
    /**
     * @description The object id of the item
     */
    itemObjectId: string;
    /**
     * @description The job history list
     */
    history: ItemJobInstance[];
}
/**
 * @description An interface representing the parameters for getting job history of one item
 */
interface GetItemJobHistoryParams {
    /**
     * @description The object id of the item
     */
    objectId: string;
}
interface ItemJobDetailActionMetadataAttrs {
    /**
     *  label of the metadata
     */
    label: string;
    /**
     *  value of the metadata
     */
    value: string;
    /**
     *  type of the metadata
     */
    type: 'text' | 'link';
    /**
     *  url need to be set when type is link
     */
    url?: string;
}
interface ItemJobDetailSection {
    title: string;
    data: ItemJobDetailActionMetadataAttrs[];
}
interface ItemJobDetailData extends ItemJobDetailDataBase {
    rawData?: ItemJobData;
}
interface ItemJobDetailDataBase {
    /**
     * We are currently rendering data in key/value format which is default type.
     * In the future we may support data in table format.
     */
    type: 'default' | 'job';
    sections: ItemJobDetailSection[];
}
type ItemJobData = ItemJobActionContext & ItemJobDataBase;
interface ItemJobDataBase {
    jobStartTimeUtc?: Date;
    jobEndTimeUtc?: Date;
    capacityDisplayName?: string;
}
interface ItemJobActionContext extends ItemJobActionContextBase {
    /**
     * item type
     */
    itemType: ItemTypeV2;
}
interface ItemJobActionContextBase {
    /**
     * item job instance id
     */
    itemJobInstanceId: string;
    /**
     * workspace object id
     */
    workspaceObjectId: string;
    /**
     * workspace name
     */
    workspaceName: string;
    /**
     * item object id
     */
    itemObjectId: string;
    /**
     * item name
     */
    itemName: string;
    /**
     * item job permission
     */
    itemJobPermission?: number;
    /**
     * item job invoke type
     */
    itemJobInvokeType?: number;
    /**
     * item job status
     */
    status: number;
    /**
     * item job owner info
     */
    ownerUser: ItemJobOwner;
    rootActivityId?: string;
}
type ItemJobOwner = {
    id: number;
    name: string;
    /**
     * user object id, e.g., 36d12ea0-818c-43fd-8902-b0960e2691f1
     */
    objectId: string;
    /**
     * user principal name, e.g., bob@microsoft.com
     */
    userPrincipalName: string;
};
interface ItemJobActionResult extends ItemJobActionResultBase {
    /**
     * hold data to be rendered in panel for the detail action
     */
    data?: ItemJobDetailData;
}
interface ItemJobActionResultBase {
    /**
     * whether the action is successful or not.
     */
    isSuccess: boolean;
    /**
     * error code
     */
    errorCode?: number;
    /**
     * error message
     */
    errorMessage?: string;
}

interface OpenItemRecentRunsConfig {
    item: ItemLikeV2;
}

/**
 * @description The interface representing the configuration settings required to open item settings panel
 */
interface OpenItemSettingsConfig {
    /**
     * @description The item metadata related with item settings panel
     */
    item: ItemLikeV2;
    /**
     * @description The selected tab name key in item settings panel. If not specified, the default tab will be About
     */
    selectedSettingId?: string;
}
/**
 * @description The interface representing the context data required to get item specific settings from workload
 */
interface ItemSettingContext {
    /**
     * @description The item metadata related with item settings panel
     */
    item: ItemLikeV2;
}
/**
 * @description The interface representing the context data related with item settings panel closing event
 */
interface OnCloseItemSettingsContext {
    /**
     * @description Whether the item settings panel is closed
     */
    isClosed: boolean;
    /**
     * @description The item object Id related with item settings panel
     */
    itemObjectId: string;
}

/**
 * @description An interface representing the input configuration to open link sharing dialog or direct sharing dialog
 */
interface ItemSharingDialogConfig {
    /**
     * @description The type of the item
     */
    itemType: string;
    /**
     * @description The object id of the item
     */
    itemObjectId: string;
    /**
     * @description If current action is to open link sharing dialog or direct sharing dialog
     */
    linkSharing?: boolean;
    /**
     * @description
     * The users will be shown in email list of sharing dialog as pre-selected users.
     * The users can be un-selected in following actions after opening sharing dialog
     */
    preSelectedUserPrincipals?: string[];
    /**
     * @description Share options that are checked by default
     */
    defaultShareOptions?: string[];
    /**
     * @description Sharing dialog title that can be customized by each API call
     */
    customizedTitle?: string;
}
/**
 * @description An interface representing the input of API: checkPermissionsOfItem
 */
interface CheckPermissionsOfItemInput {
    /**
     * @description The type of the item
     */
    itemType: string;
    /**
     * @description The object id of the item
     */
    itemObjectId: string;
    /**
     * @description Core permissons to check
     */
    permissions: Permissions;
    /**
     * @description Customized permissions to check
     */
    itemPermissions: number;
}
/**
 * @description An interface representing the result of API: checkPermissionsOfItem
 */
interface CheckPermissionsOfItemResult {
    /**
     * @description If current user has required permissions
     */
    value: boolean;
}
/**
 * @description An interface representing the input of API: checkPermissionsOfWorkspace
 */
interface CheckPermissionsOfWorkspaceInput {
    /**
     * @description Object id of target workspace
     */
    workspaceObjectId: string;
    /**
     * @description Permissions of workspace to check
     */
    permissions: Permissions;
}
/**
 * @description An interface representing the result of API: checkPermissionsOfWorkspace
 */
interface CheckPermissionsOfWorkspaceResult {
    /**
     * @description If current user has required workspace permissions
     */
    value: boolean;
}
/**
 * @description An interface representing the input of API: getPermissionsOfItem
 */
interface GetPermissionsOfItemInput {
    /**
     * @description The type of the item
     */
    itemType: string;
    /**
     * @description The object id of the item
     */
    itemObjectId: string;
}
/**
 * @description An interface representing the result of API: getPermissionsOfItem
 */
interface GetPermissionsOfItemResult {
    /**
     * @description Core permissions of item
     */
    permissions: Permissions;
    /**
     * @description Customzied permissions of item
     */
    itemPermissions: number;
}
/**
 * @description An interface representing the input of API: getPermissionsOfItemByUser
 */
interface GetPermissionsOfItemByUserInput {
    /**
     * @description The object id of item
     */
    itemObjectId: string;
    /**
     * @description User Object Ids
     */
    userObjectIds: string[];
}
/**
 * @description An interface representing the result of API: getPermissionsOfItemByUser
 */
interface GetPermissionsOfItemByUserResult {
    /**
     * @description User results with permissions
     */
    permissionsOfItemByUserList: PermissionsOfItemByUser[];
}
/**
 * @description An interface representing single user with permission information
 */
interface PermissionsOfItemByUser {
    /**
     * @description Object id of user
     */
    userObjectId: string;
    /**
     * @description Core permissions of user
     */
    permissions: Permissions;
    /**
     * @description Customized permissions of user
     */
    itemPermissions: ItemPermissions;
}
type ItemPermissions = number;
/**
 * @description An interface representing input of API: getPermissionsOfWorkspace
 */
interface GetPermissionsOfWorkspaceInput {
    /**
     * @description Object id of workspace
     */
    workspaceObjectId: string;
}
/**
 * @description An interface representing result of API: getPermissionsOfWorkspace
 */
interface GetPermissionsOfWorkspaceResult {
    /**
     * @description Workspace permissions
     */
    permissions: Permissions;
}
/**
 * @description An interface representing input of API: checkItemSharingEnabled
 */
interface CheckItemSharingEnabledInput {
    /**
     * @description The type of the item
     */
    itemType: string;
    /**
     * @description The object id of the item
     */
    itemObjectId: string;
}
/**
 * @description An interface representing result of API: checkItemSharingEnabled
 */
interface CheckItemSharingEnabledResult {
    /**
     * @description If sharing of current item is available for current user
     */
    value: boolean;
}
/**
 * @description An interface representing input of API: getItemTypeShareablePermissions
 */
interface GetItemTypeShareablePermissionsInput {
    /**
     * @description The type of the item
     */
    itemType: string;
}
/**
 * @description An interface representing result of API: getItemTypeShareablePermissions
 */
interface GetItemTypeShareablePermissionsResult {
    /**
     * @description Core permissions of this type item that can be shared to other users
     */
    corePermissions: CorePermission[];
    /**
     * @description Customized permissions of this type item that can be shared to other users
     */
    itemPermissions: TriItemPermission[];
}
/**
 * @description An enum representing core permissions
 */
declare enum Permissions {
    None = 0,
    Read = 1,
    Write = 2,
    ReShare = 4,
    Explore = 8,
    CopyOnWrite = 16,
    WriteCheckRelaxForReadOnlyGroup = 32,
    Execute = 64,
    ReadExplore = 9,
    ReadWrite = 3,
    ReadWriteCheckRelaxForReadOnlyGroup = 35,
    ReadReshare = 5,
    All = 7
}
/**
 * @description An interface representing name and value pair of core permissions
 */
interface CorePermission {
    /**
     * @description Name of permission
     */
    name: string;
    /**
     * @description Value of permission in number format
     */
    value: Permissions;
}
/**
 * @description An interface representing customized permissions
 */
interface TriItemPermission {
    /**
     * @description Name of customized permission
     */
    name: string;
    /**
     * @description Id of customized permission
     */
    id: number;
    /**
     * @description Value of customized permission
     */
    value: number;
}
/**
 * @description An enum representing the scope of link sharing
 */
declare enum SharingLinkType {
    TenantOnly = "TenantOnly",
    SpecificPeople = "SpecificPeople",
    ExistingAccess = "ExistingAccess"
}
/**
 * @description An interface representing the information of related sharing
 */
interface TriRelatedSharingPermissions {
    /**
     * @description The type of the item
     */
    itemType: string;
    /**
     * @description Core permissions of related shared item
     */
    corePermissions: number;
    /**
     * @description Customized permissions of related shared item
     */
    itemPermissions: number;
}
/**
 * @description An interface representing the result of API: openItemSharingDialogWithResult
 */
interface SharingResult {
    /**
     * @description If sharing has successfully or not
     */
    sharingCompleted: boolean;
    /**
     * @description Scope of sharing. Only available for link sharing.
     */
    scope?: SharingLinkType;
    /**
     * @description Shared users's object id
     */
    sharedUsers: string[];
    /**
     * @description Shared core permissions
     */
    permissions: Permissions;
    /**
     * @description Shared customized permissions
     */
    itemPermissions: number;
    /**
     * @description Related sharing information
     */
    relatedSharingPermissions?: TriRelatedSharingPermissions[];
}

/**
 * @description An enum of all valid error dialog widths
 */
declare enum ErrorDialogWidth {
    Small = "288px",
    Medium = "576px",
    Large = "864px",
    XLarge = "1440px"
}
/**
 * @description An interface representing an error dialog button
 */
interface ErrorDialogButton {
    /**
     * @description Display name of the button.
     */
    name: string;
    /**
     * @description HTML attribute aria-label of the button.
     */
    label?: string;
}
/**
 * @description Configurations for host's open error dialog service.
 */
interface ErrorDialogConfig extends BaseErrorDialogConfig {
    /**
     * @description Configurations of the error dialog
     */
    errorOptions: ErrorOptions;
    /**
     * @description The source of the error
     */
    errorSource?: ErrorSource;
}
/**
 * @description Configurations used to render the error dialog.
 */
interface ErrorOptions {
    /**
     * @description Title of the error dialog.
     */
    title: string;
    /**
     * @description The id of the request associated with the error
     */
    requestId?: string;
    /**
     * @description The status code of the request associated with the error
     */
    statusCode?: string;
    /**
     * @description The help link to render
     */
    helpLink?: string;
    /**
     * @description The time when the error occurrs
     */
    errorTime?: string;
    /**
     * @description The stack trace of the error
     */
    stackTrace?: string;
    /**
     * @description Plain text error detail.
     */
    plainTextDetail?: string;
    /**
     * @description Label value error details.
     */
    labelValueDetails?: ErrorDetail[];
    /**
     * @description Primary button definition. Rendered at the right bottom of the error dialog.
     */
    primaryButton?: ErrorDialogButton;
    /**
     * @description
     * Secondary button definition. Rendered at the right bottom of the error dialog close to primary button.
     * A close button will be rendered if users don't provide a secondary button.
     */
    secondaryButton?: ErrorDialogButton;
    /**
     * @description
     * Tertiary button definition. Rendered at the left bottom of the error dialog.
     * A go home button will be rendered if users don't provide a tertiary button.
     */
    tertiaryButton?: ErrorDialogButton;
}
/**
 * @description The interface representing label-value styled error detail
 */
interface ErrorDetail {
    /**
     * @description Error label
     */
    label: string;
    /**
     * @description Error message
     */
    value: string;
}
/**
 * @description An enum of all valid error sources
 */
declare enum ErrorSource {
    FabricWorkload = "FabricWorkload",
    WorkloadHost = "WorkloadHost",
    WorkloadSDK = "WorkloadSDK"
}
/**
 * @description An enum of all valid error kinds
 */
declare enum ErrorKind {
    Error = 1,
    Fatal = 2,
    Warning = 3,
    Custom = 4
}
/**
 * @description A union type that includes different categories of errors, such as system errors and user errors
 */
type ErrorCategory = 'System' | 'User';
/**
 * @description Shared configurations used by both workload openError API and host's open error dialog service.
 */
interface BaseErrorDialogConfig {
    /**
     * @description The localized error message
     */
    errorMsg: string;
    /**
     * @description The kind of the error
     */
    kind?: ErrorKind;
    /**
     * @description The feature name of the error, used for telemetry service.
     */
    featureName?: string;
    /**
     * @description Width of the error dialog, default width is 576px.
     */
    width?: ErrorDialogWidth;
    /**
     * @description
     * Where the dialog should focus on open.
     * Default is false.
     */
    autoFocus?: boolean;
}
/**
 * @description Configurations for workload's openError API.
 */
interface OpenErrorConfig extends BaseErrorDialogConfig {
    /**
     * @description Error dialog specific options
     */
    errorOptions?: ErrorOptions;
}
/**
 * @description Configurations for handling invalid route
 */
interface HandleInvalidRouteConfig {
    /**
     * @description The route path
     */
    routePath?: string | undefined;
    /**
     * @description The error message to show
     */
    invalidRouteErrorMessage?: string | undefined;
}
/**
 * @description The interface representing a failure response
 */
interface FailureResponse {
    /**
     * @description The status code of the response
     */
    status: number;
    /**
     * @description The response body
     */
    body?: string | Record<string, unknown>;
    /**
     * @description The response headers
     */
    headers?: HeadersInit;
}
/**
 * @description The type representing the next step to take after handling a request failure
 *
*  Possible values:
* 'refreshAccessToken' - The request failure may relate to an invalid access token. The workload should force a token refresh.
 */
type HandleRequestFailureWorkloadNextStep = 'refreshAccessToken';
/**
 * @description The interface representing the result of a 'handle request failure' API call
 */
interface HandleRequestFailureResult {
    /**
     * @description True if this failure is recognized by shell and proper action is taken.
     */
    handled?: boolean;
    /**
     * @description The suggested action to take by the workload.
     *  When this field is provided, it means the error is recognized by shell and shell has taken corresponding action, but it needs further action in the workload side.
     *  In this case, ignore the result of the `handled` field.
     */
    action?: HandleRequestFailureWorkloadNextStep;
}
/**
 * @description The interface representing a general error result
 */
interface ErrorResult {
    /**
     * @description The error object
     */
    error: unknown;
}
/** @internal */
interface UnhandledExceptionHandlerConfig {
    iframe: string;
}

/** @internal */
interface AccessToken {
    /**
     * The access token.
     */
    token: string;
    /**
     * The authority used to generate the token
     */
    authority?: string;
    /**
     * Scopes that are validated for the respective token
     */
    scopes?: string[];
    /**
     * The correlationId of the request to fetch the token
     */
    correlationId?: string;
    /**
     * `tid` claim from ID token
     */
    tenantId?: string;
    /**
     * Before MSAL.js integration is ready, it's workload's responsibility to manage token expiration.
     * With mSAL.js, token will be cached automatically.
     */
    expiry?: Date;
    /**
     * The user's account ID
     */
    localAccountId?: string;
}
/** @internal */
type AccessTokenErrorResult = ErrorResult & {
    /**
     * The error is either caused by system or user.
     */
    category?: ErrorCategory;
};

/**
 * @description A generic type that adds additional properties to a function type.
 */
type With<TFunc extends (...args: any[]) => void, TProps = {
    type: string;
}> = {
    [K in keyof TProps]: TProps[K];
} & {
    (...args: Parameters<TFunc>): ReturnType<TFunc>;
};
/**
 * @description The type of the message
 */
type MessageType = string;
/**
 * @description A message must have a type property, which is a string
 */
interface Message {
    readonly type: MessageType;
}
/**
 * @description An object that defines the properties that are unique to each message
 */
type MessageObject = object;
/**
 * @description Properties that are unique to each message, with the possibility of no properties being present (undefined).
 */
type MessageProps = MessageObject | undefined;
/**
 * @description A message with a type and additional properties
 */
type MessageWithProps<TProps extends MessageProps> = Message & TProps;
/**
 * @description Arguments used to create messages
 */
type MessageCreatorArgs = any[];
/**
 * @description A function that creates a message object with a specified type, additional properties, and custom arguments
 */
type MessageCreatorWithFactory<TArgs extends MessageCreatorArgs, TProps extends MessageProps> = {
    (...args: TArgs): MessageWithProps<TProps>;
    readonly type: MessageType;
};
/**
 * @description Properties associated with workload messages
 */
interface WorkloadMessageProps {
    iframeId: string;
}
/**
 * @description A function that creates a message creator with a specified type and optional properties associated with workload messages
 */
type WorkloadMessageCreator<TProps> = [
    TProps
] extends [undefined] ? With<() => MessageCreatorWithFactory<[iframeId: string], WorkloadMessageProps>> : With<(props: TProps) => MessageCreatorWithFactory<[iframeId: string], TProps & WorkloadMessageProps>>;
/**
 * @description A function that listens for workload messages of a certain workload message type
 */
type WorkloadMessageHandler<TProps> = (message: ReturnType<ReturnType<WorkloadMessageCreator<TProps>>>) => void;
/**
 * @description Properties associated with asynchronous workload messages
 */
interface AsyncWorkloadMessageProps extends WorkloadMessageProps {
    asyncId: string;
}
/**
 * @description A message with a type and properties associated with asynchronous workload messages
 */
type AsyncWorkloadMessage = Message & AsyncWorkloadMessageProps;
/**
 * @description A message with a type and properties associated with asynchronous workload messages, with the possibility of no properties being present (undefined)
 */
type AsyncWorkloadMessageWithProps<TProps extends MessageProps> = [TProps] extends [undefined] ? AsyncWorkloadMessage : AsyncWorkloadMessage & TProps;
/**
 * @description A function that creates a message creator with a specified type and optional properties for asynchronous workload messages
 */
type AsyncWorkloadMessageCreatorFactory<TProps extends MessageProps, TArgs extends MessageCreatorArgs = [], TResult = undefined> = [
    TProps
] extends [undefined] ? With<() => MessageCreatorWithFactory<[iframeId: string, ...args: TArgs], AsyncWorkloadMessageProps>, {
    type: string;
    __result?: TResult;
}> : With<(props: TProps) => MessageCreatorWithFactory<[iframeId: string, ...args: TArgs], AsyncWorkloadMessageWithProps<TProps>>, {
    type: string;
    __result?: TResult;
}>;
/**
 * @description A set of methods for creating asynchronous workload messages
 */
interface AsyncWorkloadMessageCreator<TStart extends MessageProps, TResolve extends MessageProps, TReject extends MessageProps> {
    /**
     * @description A message creator for "start" messages
     */
    start: AsyncWorkloadMessageCreatorFactory<TStart, [], [TResolve, TReject]>;
    /**
     * @description A message creator for "resolve" messages
     */
    resolve: AsyncWorkloadMessageCreatorFactory<TResolve, [asyncId: string]>;
    /**
     * @description A message creator for "reject" messages
     */
    reject: AsyncWorkloadMessageCreatorFactory<TReject, [asyncId: string]>;
}
/**
 * @description A response message for asynchronous workload messages
 */
type AsyncWorkloadMessageResponse<TResponse extends MessageProps> = TResponse extends undefined ? AsyncWorkloadMessage : AsyncWorkloadMessageWithProps<TResponse>;
/**
 * @description A message creator for asynchronous workload message requests
 */
type AsyncWorkloadMessageRequestCreator<TStart extends MessageProps, TResolve extends MessageProps, TReject extends MessageProps> = ReturnType<AsyncWorkloadMessageCreator<TStart, TResolve, TReject>['start']>;
/**
 * @description A message creator for asynchronous workload message responses
 */
type AsyncWorkloadMessageResponseCreator<TStart extends MessageProps, TResolve extends MessageProps, TReject extends MessageProps> = ReturnType<AsyncWorkloadMessageCreator<TStart, TResolve, TReject>['resolve' | 'reject']>;
/**
 * @description A function that listens for asynchronous workload messages of a certain asynchronous workload message type
 */
type AsyncWorkloadMessageHandler<TStart extends MessageProps, TResolve extends MessageProps, TReject extends MessageProps> = (message: ReturnType<AsyncWorkloadMessageRequestCreator<TStart, TResolve, TReject>>) => AsyncWorkloadMessageResponseCreator<TStart, TResolve, TReject> | Promise<AsyncWorkloadMessageResponseCreator<TStart, TResolve, TReject>>;

/**
 * @description
 * A interface defines the contract for a duplex communication message broker used by workload clients
 */
interface WorkloadClientMessageBroker {
    /**
     * @description Registers a message listener that is invoked when a synchronous message of a specific type is received by the message broker
     * @param creator The synchronous message type to listen for
     * @param handler The message listener
     */
    listenFor<TProps>(creator: WorkloadMessageCreator<TProps>, handler: WorkloadMessageHandler<TProps>): void;
    /**
     * @description Registers a message listener that is invoked when an asynchronous message of a specific type is received by the message broker
     * @param creator The asynchronous message type to listen for
     * @param handler The message listener
     */
    listenForAsync<TStart extends MessageProps, TResolve extends MessageProps, TReject extends MessageProps>(creator: AsyncWorkloadMessageCreator<TStart, TResolve, TReject>, handler: AsyncWorkloadMessageHandler<TStart, TResolve, TReject>): void;
    /**
     * @description Sends a synchronous message and returns immediately
     * @param message The synchronous messsage to send
     */
    send(message: MessageCreatorWithFactory<[
        iframeId: string
    ], WorkloadMessageProps>): void;
    /**
     * @description Sends an asynchronous message and waits until the receiver of the message responds
     * @param message The asynchronous messsage to send
     * @returns The response of the asynchronous messsage
     */
    sendAsync<TResponse extends MessageProps>(message: With<MessageCreatorWithFactory<[
        iframeId: string
    ], AsyncWorkloadMessageProps>, {
        __result?: [TResponse];
    }>): Promise<AsyncWorkloadMessageResponse<TResponse>>;
}

/**
 * @description The type of workload iframe
 */
type IFrameType = 'worker' | 'page' | 'panel' | 'dialog';
/** @internal */
type EnvironmentName = 'Onebox' | 'INT' | 'TEST' | 'DAILY' | 'DXT' | 'MSIT' | 'PROD' | 'FF' | 'TB' | 'PF' | 'MC' | 'USNat' | 'USSec' | 'DEFAULT';
/**
 * @description The metadata associated with the workload iframe
 */
interface WorkloadMeta {
    /**
     * @description The unique identifier for the workload iframe
     */
    iframeId: string;
    /**
     * @description The type of workload iframe, such as worker, page, dialog, etc
     */
    iframeType: IFrameType;
    /**
     * @description The name of the environment
     */
    environmentName: EnvironmentName;
    /**
     * @description The name of the workload
     */
    workloadName: string;
    /**
     * @description The origin of the host application
     */
    workloadHostOrigin: string;
    /**
     * @description Indicates whether the workload should load with un-minified JavaScript
     */
    unmin: boolean;
    /**
     * @description Indicates whether the workload should load from CDN
     */
    useCDN: boolean;
    /**
     * @description
     * This hint instructs the workload iframe where it will be navigated to, allowing it to optimize performance by pre-fetching relevant JavaScript
     * before receiving the first navigation message. The first navigation message will be received only after the workload has been bootstrapped.
     */
    bootstrapPath?: string;
    /**
     * @description
     * This indicates the time of the most recent failure to download a resource from the CDN. If the failure occurred recently, the workload will download
     * from the source service rather than the CDN, regardless of the value of useCDN.
     */
    cdnFallbackTime?: string;
    /**
     * @description
     * Indicates whether the workload initializes Worker iframe and UI iframe simultaneously.
     */
    parallelLoadingEnabled?: boolean;
}

/**
 * @description An interface representing the parameters that are passed to the workload to initialize the application
 */
interface InitParams {
    /**
     * @description
     * The environment name of the portal.
     * The 'DEFAULT' is to include the environment that may be added in the future and avoid block issues.
     */
    environmentName: EnvironmentName;
    /**
     * @description
     * A hint instructs the workload application where it will be navigated to, allowing the workload application to optimize
     * performance by pre-fetching relevant JavaScript before receiving the first navigation message.
     */
    bootstrapPath: string | null;
}
/**
 * @description An interface representing the configuration settings required to create an instance of the workload client
 */
interface WorkloadClientConfig {
    /**
     * @description
     * The target window which the workload used in cross-iframe communication.
     * In most scenarios, it is window.parent.
     * Workloads need to set this value when they have nested frames and use the workload client library in the inner frame .
     */
    workloadHostWindow?: Window;
}
declare const DefaultWorkloadClientConfig: WorkloadClientConfig;

/**
 * @description Image type
 */
type ImageType = 'png' | 'svg+xml';
/**
 * @description Base 64 image type
 */
type Base64Image<ImageType extends string> = `data:image/${ImageType};base64${string}`;
/**
 * @description An interface representing a base item
 */
interface ItemBase {
    /**
     * @description The numeric id of the item
     */
    id?: number;
    /**
     * @description The item object id
     */
    objectId?: string;
}
/**
 * @description An enum of all valid datahub list pivot
 */
declare enum DatahubListPivot {
    All = 0,
    MyData = 1,
    TrustedInYourOrg = 2,
    /**
     * @deprecated this tab is not in use - ThisWorkspace
     */
    ThisWorkspace = 3,
    ExternalDatasets = 4,
    Recommended = 5,
    Recent = 6,
    Favorites = 7
}
/**
 * @description An interface representing an action button in the datahub
 */
interface DatahubButton {
    /**
     * @description The action id of the button
     */
    actionId: string;
    /**
     * @description The item type that realted to the button
     */
    itemType?: ExtendedItemTypeV2;
    /**
     * @description The localized display name of the button
     */
    nameLocalized: string;
    /**
    * @description The localized display name alternative, used if the primary dropdown text is different than the primary button text.
    */
    nameAlternativeLocalized?: string;
    /**
     * @description The name of the button
     */
    name?: string;
    /**
     * @description The localized tooltip of the button
     */
    tooltipLocalized?: string;
    /**
     * @description The tooltip of the button
     */
    tooltip?: string;
    /**
     * @description The predicate if the button is allowed
     */
    isAllowed?: (item: ItemBase) => boolean | Promise<boolean>;
    /**
     * @description The predicate if the button is disabled
     */
    isDisabled?: (item: ItemBase) => boolean | Promise<boolean>;
}
/**
 * @description An interface representing the datahub selector dialog result
 */
interface DatahubSelectorDialogResult {
    /**
     * @description the selected Item object Ids from the list.
     */
    selectedDatahubItemObjectIds?: string[];
    /**
     * @description the selected Items from the list.
     */
    selectedDatahubItem?: SelectedDatahubItem[];
    /**
     * @description The selected button (DatahubButton).
     */
    buttonUserChoiceDatahub?: DatahubButton;
}
/**
 * @description An interface representing the datahub selector dialog config
 */
interface DatahubSelectorDialogConfig extends DatahubCompactViewConfig, DatahubHeaderDialogConfig {
    /**
     * @description The context object - where the user is - what workspace is in use, is it my workspace, etc.
     */
    contextInfo?: any;
    /**
     * @description A dictionary where the key is DatahubItemType and the value is collection of DatahubButton[].
     */
    datahubButtonUserChoicesByType?: Partial<Record<ExtendedItemTypeV2, DatahubButton[]>>;
    /**
     * @description Link below primary action button
     */
    datahubButtonLearnMoreLink?: {
        url: string;
        text: string;
    };
}
/**
 * @description An interface representing the datahub header dialog config
 */
interface DatahubHeaderDialogConfig {
    /**
     * @description  The localized title of the dialog (localization key)
     */
    dialogTitleLocalized?: string;
    /**
     * @description  The title of the dialog
     */
    dialogTitle?: string;
    /**
     * @description Additional inforamation content. Will appear only if learnMorelink is defined.
     */
    dialogAdditionalInfo?: string;
    /**
     * @description The title of the dialog (localization key)
     */
    dialogDescriptionLocalized?: string;
    /**
     * @description The title of the dialog
     */
    dialogDescription?: string;
    /**
     * @description The default behavior is that learn more link is not visible, until the host customize it.
     */
    learnMorelink?: {
        linkUrl: string;
        linkText: string;
    };
}
/**
 * @description An enum of all valid datahub filter type
 */
declare enum DatahubFilterType {
    domain = "domain",
    workspace = "workspace",
    fabricCreateShortcut = "fabricCreateShortcut",
    fabricRegion = "FabricRegion"
}
/**
 * @description An enum of all valid display clolumn
 */
declare enum DisplayColumn {
    Icon = "icon",
    Name = "name",
    Type = "type",
    Endorsement = "endorsement",
    Owner = "owner",
    Workspace = "workspaceName",
    LastRefreshed = "lastRefreshed",
    Sensitivity = "sensitivity",
    LastAccessed = "lastAccessed",
    NextRefresh = "nextRefresh",
    Organization = "organization",
    Region = "region",
    Recent = "recent"
}
/**
 * @description An interface representing the datahub filter
 */
interface DatahubFilter {
    /**
     * @description  The datahub filter types
     */
    datahubFilterType: DatahubFilterType;
    /**
     * @description  The values of the DatahubFilterType
     */
    values: string[];
}
/**
 * @description An interface representing the details on the datahub consumer host
 */
interface HostDetails {
    experience: string;
    scenario: string;
    subScenario?: string;
}
/**
 * @description An interface representing a configuration that apply for a specific supportedType
 */
interface TypeConfig {
    /**
     * @description Whether to show expand collapse
     */
    showExpandCollapse?: boolean;
    /**
    * @description Whether to filter by property – currently supports only Fabric extended properties
    */
    filterByProperties?: Record<string, unknown>;
}
/**
 * @description An interface representing a configuration of the Datahub Compact View
 */
interface DatahubCompactViewConfig {
    /**
     * @description The columns we allow in the table - optional with default value.
     */
    displayColumns?: DisplayColumn[];
    /**
     * @description Will open the datahub compact view filter by the values in the array
     */
    filterDatahubByTypes?: ExtendedItemTypeV2[];
    /**
     * @description The item types to show in the table
     */
    supportedTypes?: ExtendedItemTypeV2[];
    /**
     * @description The function gets the 'item' as input and defines whether to display the item in the table or not.
     */
    shouldIncludeFuncByItemType?: {
        [key in ExtendedItemTypeV2]?: (item: any) => boolean;
    };
    /**
     * @description Multi-selection of items is possible when this flag is enabled - by default the value is 'false'.
     */
    multiSelectionEnabled?: boolean;
    /**
     * @description Whether to show fabric icons
     */
    isFabricIcons?: boolean;
    /**
     * @description Filter by list of workspaces/domains – default is no filter
     */
    filters?: DatahubFilter[];
    /**
     * @description Filter by pivot – default is All
     */
    selectedPivot?: DatahubListPivot;
    /**
     * @description Whether to show workspace navigation pane – default is 'true'.
     */
    workspaceNavigationEnabled?: boolean;
    /**
     * @description Whether to persist open/closed mode of workspace navigation pane from user's local storage – default is 'false'.
     */
    useLocalStorageForWorkspaceMode?: boolean;
    /**
     * @description Whether to show domain selection box – default is 'true'.
     */
    isDomainsSelectionEnabled?: boolean;
    /**
     * @description The object Id's of the selected datahub items
     */
    selectedDatahubItemObjectIds?: string[];
    /**
     * @description Which tabs to show on the header - optional with a default value.
     */
    supportedPivots?: DatahubListPivot[];
    /**
     * @description Whether to hide the pivots or not – default is 'false'.
     */
    shouldHideHeader?: boolean;
    /**
     * @description Whether to hide the search box or not – default is 'false'.
     */
    shouldHideSearchBox?: boolean;
    /**
     * @description Whether to hide the filter or not – default is 'false'.
     */
    shouldHideFilter?: boolean;
    /**
     * @description Search in the compact view results – default is empty string.
     */
    searchQueryInput?: string;
    /**
     * @description The connection types to show in the table.
     */
    /** @deprecated this field is not in use. please use instead: `supportedConnections` */
    connectionSupportedTypes?: string[];
    /**
     * @description The connection types to show in the table with there filters
     */
    supportedConnections?: {
        [key: string]: SupportedConnection;
    };
    /**
     * @description whether to allow sort option – default is 'true'.
     */
    allowSort?: boolean;
    /**
     * @description Whether to mark with background search query on the results – default is 'false'.
     * If both this and `shouldBoldSearchQuery` are true, the search result will be bold
     */
    shouldHighlightSearchQuery?: boolean;
    /**
 * @description Whether to mark with bold style search query on the results – default is 'true'.
 * If both this and `shouldHighlightSearchQuery` are true, the search result will be bold
 */
    shouldBoldSearchQuery?: boolean;
    /**
     * @description Whether to ignore current filters on search – default is 'false'.
     */
    searchWithoutPivots?: boolean;
    /**
     * @description An array of datahub items to be added to the compact view table.
     */
    injectedDatahubItemUIs?: InjectedDatahubItemUI[];
    /**
     * @description Whether to show items in the CV with no scrolling, only what fits to the CV window - default is 'false'.
     */
    shouldFitItemsToHeight?: boolean;
    /**
     * @description Where the Datahub is hosted
     */
    datahubTableHost?: string;
    /**
     * @description Some details on the datahub consumer host.
     */
    hostDetails?: HostDetails;
    /**
     * @description Configurable datahub css styles, currently only colors.
     */
    cssStyles?: Partial<Record<SupportedDatahubStyleProperties, string>>;
    /** @deprecated this field is not in use. please use instead: `disableHorizontalScroll` */
    supportHorizontalScroll?: boolean;
    /**
     * @description configurable texts (localization key)
     */
    configurableStrings?: DatahubConfigurableStrings;
    /**
     * @description Whether to disable horizontal scroll – default is 'false'.
     */
    disableHorizontalScroll?: boolean;
    /**
     * @description Whether to hide empty search result – default is 'false'.
     */
    shouldHideEmptySearchResult?: boolean;
    /**
     * @description The minimal item permission to show.
     */
    globalPermissionsMask?: number;
    /**
     * @description The minimal item permission to show per item.
     */
    supportedTypesPermissions?: {
        [key: string]: number;
    };
    /**
     * @description  Global config for all supported types
     */
    globalConfigForAllSupportedTypes?: TypeConfig;
    /**
     * @description Config for supported type
     */
    supportedTypesConfig?: {
        [key: string]: TypeConfig;
    };
    /**
     * @description Disabling the add data button on empty state screen.
     */
    disableAddDataEmptyStateButton?: boolean;
    /**
     * @deprecated this field is not in use.
     */
    disableHoverCard?: boolean;
    /**
     * @description Hover card configuration
     */
    hoverCardConfiguration?: HoverCardConfiguration;
    /**
     * @description Whether is compact view mode
     */
    isCompactViewMode?: boolean;
    /**
     * @description Whether Parent-child relationship is enabled
     */
    enableParentChild?: boolean;
    /**
     * @description whether the action for navigating to the item should be shown.
     */
    supportNameDirectLink?: boolean;
    /**
     * @description whether to color the row on selection.
     */
    highlightRowOnSelection?: boolean;
}
/**
 * @description An enum of all valid supported datahub style proprties
 */
declare enum SupportedDatahubStyleProperties {
    searchHighlightColor = "searchHighlightColor",
    lighterDialogBackgroundColor = "lighterDialogBackgroundColor",
    selectedRowColor = "selectedRowColor",
    hoverRowColor = "hoverRowColor",
    rowBorderColor = "rowBorderColor",
    rowForegroundColor = "rowForegroundColor",
    pillColor = "pillColor",
    pillBorderColor = "pillBorderColor",
    pillBackgroundColor = "pillBackgroundColor",
    activePillColor = "activePillColor",
    activePillBorderColor = "activePillBorderColor",
    activePillBackgroundColor = "activePillBackgroundColor",
    pillHoverBackgroundColor = "pillHoverBackgroundColor",
    activePillHoverBackgroundColor = "activePillHoverBackgroundColor",
    endorsementForegroundColor = "endorsementForegroundColor",
    hoverDWBColor = "hoverDWBColor",
    pressedDWBColor = "pressedDWBColor",
    selectedDWBColor = "selectedDWBColor",
    foregroundWSExpandIconColor = "foregroundWSExpandIconColor",
    foregroundWSTitleColor = "foregroundWSTitleColor",
    foregroundWSSubTitleColor = "foregroundWSSubTitleColor",
    foregroundDWBColor = "foregroundDWBColor",
    foregroundDWBIconColor = "foregroundDWBIconColor"
}
/**
 * @description An interface representing selected datahub item
 */
interface SelectedDatahubItem {
    /**
     * @description The selected datahub item workspace object id
     */
    workspaceObjectId: string;
    /**
     * @description The selected item object id
     */
    itemObjectId: string;
    /**
     * @description The selected datahub item ui
     */
    datahubItemUI?: BaseDatahubItemUI;
}
/**
 * @description An interface representing datahub item ui metadata
 */
interface BaseDatahubItemUI {
    /**
     * @description The object id of the item
     */
    itemObjectId: string;
    /**
     * @description The display name of the item
     */
    displayName: string;
    /**
     * @description The workspace name of the item
     */
    workspaceName: string;
    /**
     * @description The type of the item
     */
    fabricItemType?: string;
    /**
     * @description The description of the item
     */
    description?: string;
    /**
     * @description The most recent time the item was visited
     */
    lastVisitedTimeUTCEpochTime?: number;
    /**
     * @description The datasource references of the item
     */
    datasourceReferences?: DatasourceReference[];
    /**
     * @description The item owners
     */
    ownerUsers?: any[];
    /**
     * @description The type of the item
     */
    itemType?: any;
    /**
     * @description The item endorsement
     */
    stage?: any;
    /**
     * @description The item sensitivity label
     */
    itemInformationProtection?: any;
    /**
     * @description The item owner object id
     */
    ownerOid?: string;
    /**
     * @description The owner principal name
     */
    ownerPrincipalName?: string;
}
/**
 * @description An interface representing the injected datahub item ui
 */
interface InjectedDatahubItemUI extends BaseDatahubItemUI {
    /**
     * @description The icon of the item.
     */
    icon?: Base64Image<ImageType>;
    /**
     * @description The localized type of the item.
     */
    localizedType?: string;
    /**
     * @description Relative navigation url of the item
     */
    relativeNavigationURL?: string;
    /**
     * @description relativeNavigationURL query params.
     */
    queryParams?: {
        [key: string]: string | number;
    };
}
/**
 * @description An interface representing the datasource reference
 */
interface DatasourceReference {
    /**
     * @description the item datasource reference
     */
    dsr: string;
}
declare enum GatewayType {
    Resource = "Resource",
    Personal = "Personal",
    VirtualNetwork = "VirtualNetwork",
    TenantCloud = "TenantCloud"
}
interface SupportedConnection {
    gatewayTypes?: GatewayType[];
}
interface DatahubConfigurableStrings {
    pivots?: Partial<Record<DatahubListPivot, string>>;
    emptyStateLearnMoreLink?: string;
}
interface DatahubPivotDetails {
    datahubListPivot: DatahubListPivot;
    datahubPivotId: string;
    regularIcon: {
        name: string;
        sprite?: string;
    };
    filledIcon: {
        name: string;
        sprite?: string;
    };
    isVisibleByPivot?: boolean;
    title: string;
}
interface HoverCardConfiguration {
    /**
     * @description Disabling the hover card.
     */
    disableHoverCard?: boolean;
    /**
     * @description Hide the related content in the hover card.
     */
    shouldHideRelatedContentInHoverCard?: boolean;
}

declare enum OnelakeExplorerType {
    Tables = "Tables",
    Files = "Files"
}
/**
 * @description An interface representing the Onelake explorer item
 */
interface OnelakeExplorerItem {
    /**
     * @description The selected item workspace object id
     */
    workspaceObjectId: string;
    /**
     * @description The selected item object id
     */
    itemObjectId: string;
    /**
     * @description The selected item display name
     */
    itemDisplayName: string;
    /**
     * @description The selected item type
     */
    fabricItemType: ExtendedItemTypeV2;
}
/**
 * @description An interface representing the configuration of the OneLake explorer
 */
interface OnelakeExplorerConfig {
    /**
     * @description Onelake explorer item
     */
    onelakeItem: OnelakeExplorerItem;
    /**
     * @description Onelake explorer types
     */
    onelakeExplorerTypes?: OnelakeExplorerType[];
    /**
     * @description Whether to show Onelake icon - default is 'true'
     */
    includeTitleIcon?: boolean;
    /**
     * @description Whether to select Files or Tables - default is 'true'
     */
    areRootNodesCheckable?: boolean;
    /**
     * @description Localized content title
     */
    localizedContentTitle?: string;
}
/**
 * @description An interface representing the Onelake explorer result
 */
interface OnelakeExplorerResult {
    /**
     * @description The selected path
     */
    selectedPath: string;
    /**
     * @description The selected node path
     */
    selectedNodeName: string;
    /**
     * @description The selected workspace object id
     */
    workspaceObjectId: string;
    /**
     * @description The selected item object id
     */
    itemObjectId: string;
}
/**
 * @description An interface representing the Onelake explorer data
 */
interface OnelakeExplorerData {
    id: string;
    selectedPath: string;
    selectedNodeName: string;
    selectedNodeSubFolderPath?: string;
    selectedShortcutDeltaLakePath?: string;
}
/**
 * @description An interface representing the Onelake explorer multi result
 */
interface OnelakeExplorerMultiResult {
    selectedItems: OnelakeExplorerData[];
    workspaceObjectId: string;
    itemObjectId: string;
}

/**
 * @description An interface representing the configuration of the datahub wizard dialog
 */
interface DatahubWizardDialogConfig {
    /**
     * @description Datahub compact view page config
     */
    datahubCompactViewPageConfig?: DatahubCompactViewPageConfig;
    /**
     * @description One lake explorer page config
     */
    oneLakeExplorerPageConfig?: OneLakeExplorerPageConfig;
    submitButtonName?: string;
}
/**
 * @description An interface representing the Datahub wizard dialog result
 */
interface DatahubWizardDialogResult {
    /**
     * @description An object with selectedDatahubItem as key, and the value is collection of SelectedDatahubItem[]
     */
    datahubCompactViewResult?: {
        selectedDatahubItem?: SelectedDatahubItem[];
    };
    /**
     * @description An object representing OnelakeExplorerResult
     */
    onelakeExplorerResult?: OnelakeExplorerResult;
}
/**
 * @description An interface representing the configuration of the datahub compact view page
 */
interface DatahubCompactViewPageConfig {
    /**
     * @description Datahub header dialog config
     */
    headerDialogConfig?: DatahubHeaderDialogConfig;
    /**
     * @description Datahub Compact View config
     */
    datahubCompactViewConfig: DatahubCompactViewConfig;
}
/**
 * @description An interface representing the configuration of the OneLake explorer page
 */
interface OneLakeExplorerPageConfig {
    /**
     * @description Datahub header dialog config
     */
    headerDialogConfig?: DatahubHeaderDialogConfig;
    /**
     * @description OneLake explorer config
     */
    onelakeExplorerConfig?: Partial<OnelakeExplorerConfig>;
}

/**
 * @description An interface representing the location to which the workload should navigate
 */
interface WorkloadNavigation {
    /**
     * @description
     * The target URL to which the workload app should navigate.
     * For example, `/path/to/page?key1=val1&key2=val2`.
     * When a dialog/panel is closed, the workload host will explicitly ask the dialog/panel iframe to switch to the root path ('/').
     * This forces the workload to reset the UI state of the dialog/panel, avoiding opening the same dialog/panel twice in a row and having the UI state of the first dialog/panel carried over to the second.
     */
    targetUrl: string;
    /**
     * @description The timestamp of the user action that triggers the onNavigate event. Workload UX can use this timestamp as the time origin for some end-to-end, user-perceivable performance logging.
     */
    userActionTimestamp: number;
    /**
     * @description Whether the onNavigate event is triggered by opening from a deep link.
     */
    isDeepLink: boolean;
}
/**
 * @description An interface representing a particular workload-side route, including its path and query parameters
 */
interface WorkloadRoute {
    /**
     * @description The path of the workload application
     */
    path: string;
    /**
     * @description The query parameters of the workload application
     */
    queryParams?: Record<string, string>;
}
interface NavigationRouteBase {
    /**
     * @description The path to navigate to
     */
    path: string;
    /**
     * @description When set to true, the navigation modifies the current history entry instead of adding a new one.
     *
     * Note: This works only if the previous page before navigation was also rendered by the same workload request with
     * history replacement. This prevents unintended overwriting of history entries generated by other workloads.
     */
    replaceUrl?: boolean;
}
/**
 * @description An interface representing a particular host-side route
 */
interface NavigationHostRoute extends NavigationRouteBase {
}
/**
 * @description An interface representing a particular workload-side route
 */
interface NavigationWorkloadRoute extends NavigationRouteBase {
    /**
     * @description The query parameters of the workload application
     */
    queryParams?: Record<string, string | undefined | null>;
}
/**
 * @description An interface representing the navigation result
 */
interface NavigationResult {
    /**
     * @description Indicates whether the navigation is successful or not
     */
    success: boolean;
}
/**
 * @description An interface representing the data that is passed to the beforeNavigateAway hook
 */
interface BeforeNavigateAwayData {
    /**
     * @description
     * The next URL is the destination url when onLeave event is triggered.
     * For example, `/next/url?key1=val1&key2=val2`.
     */
    nextUrl: string;
}
/**
 * @description An interface representing the result that is returned by the beforeNavigateAway hook
 */
interface BeforeNavigateAwayResult {
    /**
     * @description Indicates whether navigating away from the current workload is permitted or not
     */
    canLeave: boolean;
}
/** @internal */
interface BeforeNavigateAwayListenerResult {
    setListener: boolean;
}
/**
 * @description An interface representing the data that is passed to the afterNavigateAway hook
 */
interface AfterNavigateAwayData {
    /**
     * @description
     * The next URL is the destination url when onLeaveEnd event is triggered.
     * For example, `/next/url?key1=val1&key2=val2`.
     */
    nextUrl?: string;
}
/** @internal */
interface AfterNavigateAwayListenerResult {
    setLeaveEndListener: boolean;
}

/**
 * @description An enum of all valid modes for opening an workload UI
 */
declare enum OpenMode {
    Append = 1,
    ReplaceAll = 2
}
/**
 * @description An interface representing the configuration settings required to open an workload UI
 */
interface OpenUIConfig {
    /**
     * @description The name of the workload
     */
    workloadName: string;
    /**
     * @description The route of the UI within the workload that needs to be opened
     */
    route: WorkloadRoute;
    /**
     * @description The mode for opening an workload UI
     */
    mode?: OpenMode;
}
/**
 * @description An interface representing the result returned when the workload UI is closed
 */
interface OpenUIResult {
    /**
     * @description The result value
     */
    value?: unknown;
}
/**
 * @description An enum of all valid modes for closing an workload UI
 */
declare enum CloseMode {
    PopOne = 1,
    ClearAll = 2
}
/**
 * @description An interface representing the configuration settings required to close an workload UI
 */
interface CloseUIConfig {
    /**
     * @description The mode for closing an workload UI
     */
    mode?: CloseMode;
    /**
     * @description The extra data that is passed along with the 'close' action
     */
    data?: unknown;
}
/**
 * @description An interface representing the result of closing an workload UI
 */
interface CloseUIResult {
    /**
     * @description Indicates whether the UI that is being closed was successfully closed or not
     */
    success: boolean;
}

/**
 * @description An enum of all valid dialog types
 */
declare enum DialogType {
    IFrame = 0,
    MessageBox = 1
}
/**
 * @description An interface representing configurable options available for an workload dialog
 */
interface DialogUIOptions {
    /**
     * @description
     * Width of the dialog.
     *
     * If type of the value is number, it will be treated as px value.
     * If type of the value is string, it will be used directly.
     */
    width?: number | string;
    /**
     * @description
     * Height of the dialog.
     *
     * If type of the value is number, it will be treated as px value.
     * If type of the value is string, it will be used directly.
     */
    height?: number | string;
    /**
     * @description
     * A concept borrowed from fluent ui. See blocking dialog example here https://developer.microsoft.com/en-us/fluentui#/controls/web/dialog
     *
     * @default false (non-blocking)
     */
    isBlocking?: boolean;
    /**
     * @description
     * Whether the dialog has a close button on the upper right corner.
     * If isBlocking is set to true, it is recommended to set this property to true.
     *
     * @default false (no close button)
     */
    hasCloseButton?: boolean;
    /**
     * @description
     * Whether set transparent background to dialog iframe.
     * Use it with caution. It's a workaround to show overlay outside small dialog, but it could break user experience
     * with other dialog options.
     *
     * @default false (solid white color)
     */
    isTransparent?: boolean;
}
/**
 * @description An interface representing the configuration settings required to open an workload dialog
 */
interface OpenDialogConfig extends OpenUIConfig {
    /**
     * @description Configurable options for the workload dialog
     */
    options?: DialogUIOptions;
    /**
     * @description The type of the dialog needs to be `DialogType.IFrame`
     */
    dialogType?: DialogType.IFrame;
    /**
     * @description Whether to restore focus to the element that had focus before the dialog was opened
     */
    preventFocusRestoration?: boolean;
}
/**
 * @description An enum of all valid button types
 */
declare enum ButtonType {
    Default = 0,
    Primary = 1
}
/**
 * @description An interface representing an action button
 */
interface ActionButton {
    /**
     * @description The name of the button
     */
    name: string;
    /**
     * @description The localized display name of the button
     */
    label: string;
    /**
     * @description The type of the button
     */
    buttonType?: ButtonType;
}
/**
 * @description An interface representing a link
 */
interface Link {
    /**
     * @description The URL of the link
     */
    url: string;
    /**
     * @description The localized display name of the link
     */
    label: string;
}
/**
 * @description An interface representing options available for opening a message box
 */
interface OpenMessageBoxConfig {
    /**
     * @description The type of the dialog needs to be `DialogType.MessageBox`
     */
    dialogType: DialogType.MessageBox;
    /**
     * @description Configurable options for the message box
     */
    messageBoxOptions: MessageBoxOptions;
    /**
     * @description Whether to restore focus to the element that had focus before the message box was opened
     */
    preventFocusRestoration?: boolean;
}
/**
 * @description An interface representing configurable options available for a message box
 */
interface MessageBoxOptions {
    /**
     * @description The localized title of the message box
     */
    title: string;
    /**
     * @description The localized content of the message box
     */
    content?: string;
    /**
     * @description The link in the message box
     */
    link?: Link;
    /**
     * @description Action buttons in the message box, with a maximum of three buttons allowed
     */
    actionButtons: ActionButton[];
}
/**
 * @description An interface representing the result returned when the message box is closed
 */
interface OpenMessageBoxResult {
    /**
     * @description The result value
     */
    value?: MessageBoxResult;
}
/**
 * @description An interface representing the result of a message box
 */
interface MessageBoxResult {
    /**
     * @description The name of the button that was used to close the message box
     */
    clickedButton?: string;
}

/**
 * @description The interface representing the available configuration options when posting a DOM event
 */
interface PostDOMEventConfig {
    /**
     * @description The type of the DOM event
     */
    eventType: string;
    /**
     * @description Event options, optional with default value { bubbles: true, cancelable: true, composed: true }
     */
    eventInitDict?: EventInit;
    /**
     * @description Event properties, optional with default value {}
     */
    eventProps?: Record<string, any>;
}
/** @internal */
interface WorkloadResetFocusConfig {
    index: 'first' | 'last';
}
/** @internal */
interface GetWorkloadDOMRectResult {
    isSucceed: boolean;
    rect?: DOMRect;
}
/** @internal */
interface GetWorkloadDOMRectConfig {
    /**
     * Target element selector, this string must be a valid CSS selector string. It is using `querySelector()` method to query the first element matches the specified selector
     */
    selector: string;
    /**
     * Optional, by default is false. When setting true, the query dom element will gain focus after calling this API.
     */
    setFocus?: boolean;
}

/**
 *  @description A list of predefined events that will be exposed to all consumers when they are emitted.
 */
declare const PreDefinedEventName: string[];
/**
 * @description An enum that defines the possible consumers that an event can be exposed to.
 */
declare enum ExposeTo {
    /**
     * @description
     * Events exposed to Embed, will be emitted to the hosting app of the embedded workload.
     * Relevant to embeddable workloads only.
     */
    Embed = 1,
    /**
    *  @description Includes all available consumers.
    */
    All = 1
}
/**
 * @description An interface that defines the details of the emitted event.
 */
interface EventDetails {
    /**
     *  @description Name of the event (e.g: "error" / "rendered" / etc.)
     */
    name: string;
    /**
     *  @description The consumers the event will be exposed to. Predefined events may be exposed to all consumers.
     */
    exposeTo: ExposeTo;
    /**
     *  @description Optional. Custom data that is relevant for the event (e.g: "error" event can pass the error message).
     */
    data?: any;
}

/**
 * @description Represents the type of the action name.
 */
type ActionName = string;
interface BaseAction<TData> {
    /**
     * @description
     * The name of the action. The iframe that receives the action needs to distinguish the actions
     * by name and apply different handling logic.
     */
    action: ActionName;
    /**
     * @description The payload data of the action
     */
    data?: TData;
    /**
     * @description
     * The timestamp of the user action that triggers the excute action event. Workload UX can use this
     * timestamp as the time origin for some end-to-end, user-perceivable performance logging.
     */
    userActionTimestamp?: number;
}
interface BaseActionResult<TResult> {
    result: TResult;
}
/** @internal */
type PortalAction<TData> = BaseAction<TData>;
/** @internal */
type PortalActionResult<TResult> = BaseActionResult<TResult>;
/**
 * @description The interface representing an action that a particular workload can handle
 */
interface WorkloadAction<TData> extends BaseAction<TData> {
    /**
     * @description The workload to receive the action
     */
    workloadName: string;
    /**
     * @description
     * The iframe type to receive the action. If not specified, by default, the action is received
     * by the worker iframe.
     */
    iframeType?: IFrameType;
}
/**
 * @description The result of executing the workload action
 */
type WorkloadActionResult<TResult> = BaseActionResult<TResult>;
/**
 * @description The interface representing an workload action handler
 */
interface WorkloadActionHandler {
    (action: WorkloadAction<any>): Promise<unknown>;
}
/** @internal */
interface SpecificWorkloadActionHandler {
    (arg: any): Promise<any>;
}
/** @internal */
declare enum PreDefinedWorkloadAction {
    getItemActionDynamicAttrs = "getItemActionDynamicAttrs",
    getHelpPaneData = "getHelpPaneData"
}
/**
 * @description Represents an action that can be handled by a specific workload application or the portal application
 */
type Action<TData> = PortalAction<TData> | WorkloadAction<TData>;
/**
 * @description Represents the result of executing the action
 */
type ActionResult<TResult> = BaseActionResult<TResult>;

/**
 * @description Base interface for favorite item input, containing the object ID of the item.
 */
interface FavoriteItemInputBase {
    /**
     * @description The unique identifier of the item.
     */
    itemObjectId: string;
}
/**
 * @description Interface for favorite item input, extending the base input interface.
 */
interface FavoriteItemInput extends FavoriteItemInputBase {
}
/**
 * @description Interface representing the output of a favorite item action.
 */
interface FavoriteItemOutput {
}
/**
 * @description Interface for unfavorite item input, extending the base input interface.
 */
interface UnFavoriteItemInput extends FavoriteItemInputBase {
}
/**
 * @description Interface representing the output of an unfavorite item action.
 */
interface UnFavoriteItemOutput {
}
/**
 * @description Interface for getting the favorite state of an item, extending the base input interface.
 */
interface GetItemFavoriteStateInput extends FavoriteItemInputBase {
}
/**
 * @description Interface representing the output of getting an item's favorite state.
 */
interface GetItemFavoriteStateOutput {
    /**
     * @description Indicates whether the item is favorited.
     */
    favorited: boolean;
}
/**
 * @description Type definition for a handler that reacts to changes in item favorite state.
 * @param params An object containing the new favorite state.
 */
type ItemFavoriteStateChangeHandler = (params: {
    favorited: boolean;
}) => void;
/**
 * @description Interface for input to monitor item favorite state changes, extending the base input interface.
 */
interface OnItemFavoriteStateChangeInput extends FavoriteItemInputBase {
}
/**
 * @description Interface representing a change in an item's favorite state.
 */
interface FavoriteStateChange {
    /**
    * @description The unique identifier of the item.
    */
    itemObjectId: string;
    /**
     * @description Indicates whether the item is favorited.
     */
    favorited: boolean;
}
/**
 * @description Interface representing changes in the favorite state of multiple items.
 */
interface ItemFavoriteStateChange {
    /**
    * @description A list of changes in item favorite states.
    */
    changes: FavoriteStateChange[];
}

/**
 * @description An enum of all valid types of the message bar
 */
declare enum MessageBarType {
    Information = 0,
    Error = 1,
    Warning = 2,
    Success = 3,
    Blocked = 5,
    Copilot = 6
}
/**
 * @description An interface representing a message bar
 */
interface MessageBarModel {
    /**
     * @description The type of the message bar
     */
    bannerType: MessageBarType;
    /**
     * @description The localized message
     */
    message?: string;
    /**
     * @description The localized display name of the link in the message bar
     */
    linkDisplayName?: string;
    /**
     * @description The link URL
     */
    link?: string;
    /**
     * @description The localized aria label of the link in the message bar
     */
    linkAriaLabel?: string;
    /**
     * @description Additional context information
     */
    context?: any;
    /**
     * @description Indicates whether the message bar can be dismissed or not
     */
    allowDismiss?: boolean;
    /**
     * @description Indicates whether the message bar should be displayed as a single line or multiple lines
     * @default true
     */
    isMultiline?: boolean;
    /**
     * @description
     * Control whether show expand button, only when isMultiline is false and text is too long.
     * Expand button will control message bar to expand or close.
     * @default false
     */
    allowExpandButton?: boolean;
    /**
     * @description Indicates whether the message bar should be displayed with rounded corners
     */
    isRoundedCorners?: boolean;
}

type NotificationButton = OpenNotificationButton | 'CopyButton';
/**
 * @description An enum of all valid notification types
 */
declare enum NotificationType {
    /** @deprecated */
    Default = 0,
    /** @deprecated */
    Alert = 1,
    Error = 2,
    Loading = 3,
    Success = 4,
    Warning = 5,
    Share = 6,
    Info = 7,
    /** @deprecated */
    NoIcon = 8,
    /** @deprecated */
    Delete = 10,
    /** @deprecated */
    Add = 11,
    /** @deprecated */
    Feedback = 12
}
/**
 * @description An enum of all valid notification toast durations
 */
declare enum NotificationToastDuration {
    Short = "Short",
    Medium = "Medium",
    Long = "Long"
}
interface OpenNotificationConfig {
    /**
     * @description
     * an optional field, which is the id returned in OpenNotificationResult
     *
     * if present, shell upserts the notification based on id
     * otherwise, shell insert the notification with a guid
     */
    notificationId?: string;
    /**
     * @description
     * used to determine the displayed icon
     */
    notificationType?: NotificationType;
    /**
     * @description
     * an optional avatar displayed at the icon location
     * not enabled yet
     */
    imageUrl?: string;
    /**
     * @description The localized title of the notification
     */
    title: string;
    /**
     * @description The localized message of the notification
     */
    message?: string;
    /**
     * @deprecated
     * it has the same effect as notificationId, with a lower priority
     * if both notificationId and eventId present, eventId will be ignored
     * if only eventId present, it will be honored as notificationId
     * plan to be removed
     */
    eventId?: string;
    /**
     * @description Buttons show at bottom of notification
     */
    buttons?: NotificationButton[];
    /**
     * @description The duration of the notification
     */
    duration?: NotificationToastDuration;
}
/**
 * @description An enum of all valid notification button types
 */
declare enum OpenNotificationButtonType {
    Primary = 1,
    Secondary = 2,
    Link = 3
}
/**
 * @description An interface representing a button displayed on the notification toast
 */
interface OpenNotificationButton extends WorkloadAction<unknown> {
    /**
     * @description Text that display at button
     */
    label?: string;
    /**
     * @deprecated
     * the buttons will share the same style
     */
    buttonType?: OpenNotificationButtonType;
}
/**
 * @description An interface representing the result of open notification API call
 */
interface OpenNotificationResult {
    /**
     * @description the identifier for the notification that has been opened
     */
    notificationId: string;
}
/**
 * @description An interface representing the configuration settings required to close a notification
 */
interface HideNotificationConfig {
    /**
     * @description the identifier for the notification that needs to be closed
     */
    notificationId: string;
}

/**
 * @description An interface representing the configuration settings required to open an workload page
 */
interface OpenPageConfig extends OpenUIConfig {
    /**
     * @deprecated, no matter what workload name is specified here, page will be opened only within the current workload.
     */
    workloadName?: string;
}

/**
 * @description An interface representing configurable options available for an workload panel
 */
interface PanelUIOptions {
    /**
     * @description The width of the panel
     */
    width?: number | string;
    /**
     * @description Whether click on the backdrop should dismiss the panel
     * @default undefined (has light dismiss)
     */
    isLightDismiss?: boolean;
    /**
     * @description Show panel content after panel fully opened (after animation ended)
     * @default false
     */
    showContentAfterAnimation?: boolean;
}
/**
 * @description An interface representing the configuration settings required to open an workload panel
 */
interface OpenPanelConfig extends OpenUIConfig {
    /**
     * @description Configurable options for the workload panel
     */
    options?: PanelUIOptions;
    /**
     * @description Whether to restore focus to the element that had focus before the panel was opened
     */
    preventFocusRestoration?: boolean;
}

/** @internal */
interface WorkloadLoadPerformance {
    connectEnd: string;
    connectStart: string;
    decodedBodySize: string;
    domContentLoadedEventStart: string;
    domContentLoadedEventEnd: string;
    domainLookupEnd: string;
    domainLookupStart: string;
    domInteractive: string;
    encodedBodySize: string;
    entryType: string;
    fetchStart: string;
    loadEventEnd: string;
    loadEventStart: string;
    nextHopProtocol: string;
    redirectCount: string;
    redirectEnd: string;
    redirectStart: string;
    requestStart: string;
    responseStart: string;
    responseEnd: string;
    secureConnectionStart: string;
    transferSize: string;
    unloadEventEnd: string;
    unloadEventStart: string;
    timeOrigin: string;
    deviceMemory: string;
    downlink: string;
    effectiveType: string;
    hardwareConcurrency: string;
    rtt: string;
    userAgent: string;
    browserName: string;
    browserVersion: string;
    operatingSystemName: string;
    operatingSystemVersion: string;
    workloadBootstrapEnd: string;
    workloadBootstrapStart: string;
    performanceResourceTimings: string;
    performanceResourceTimingsNum: string;
}

/** @internal */
interface GetPerformanceItemsResult {
    performanceItems: Omit<PerformanceEntry, 'toJSON'>[];
    range: [number, number];
    pendingItemsLength: number;
}
/** @internal */
interface GetPerformanceItemsConfig {
    start: number;
    length: number;
}
/** @internal */
interface StopPerformanceItemConfig extends GetPerformanceItemsConfig {
    start: number;
    length: 0;
}

/**
 * @description An enum of all valid host application types
 */
declare enum WorkloadHostApp {
    FabricWebApp = 0,
    EmbedApp = 1
}
/**
 * @description An interface representing setting properties that are shared across different workloads
 */
interface WorkloadSettingsContextAgnostic {
    /**
     * @description All the available feature switches. Stored as KV pair.
     */
    featureSwitches: Record<string, boolean>;
    /**
     * @description All the available debug switches. Stored as KV pair.
     */
    debugSwitches: Record<string, string>;
    /**
     * @description The base URL of Shared Backend that stores the tenant metadata.
     */
    sharedBackendUri: string;
    /**
     * @description The base URL of Fabric API in the Backend that stores the tenant metadata.
     */
    apiUri: string;
    /**
     * @description The URL of Fabric API Resource Id
     */
    resourceUrl: string;
    /**
     * @description
     * The current user locale chosen by user. This will be replaced by feature flag overwrite or browser default language.
     * This locale is aligned with user settings' language setting and used for language localization.
     * For example, "en-US" for English US locale
     */
    currentLanguageLocale: string;
    /**
     * @description The user preferred language chosen by user across M365 endpoints.
     */
    m365UserPreferredLanguage?: string;
    /**
     * @description The origin of Workload Host.
     */
    workloadHostOrigin: string;
    /**
     * @description
     * The application that hosts the workload.
     * Example: 0 for Fabric Web app, 1 for Embed app.
     */
    workloadHostApp: WorkloadHostApp;
    /**
     * @description SessionId for current logged in user's session
     */
    sessionId: string;
    /**
     * @description productName for current workload
     */
    productName: string;
    /**
     * @description Evaluate if information protection supported for fabric
     */
    isInformationProtectionSupportedForFabric: boolean;
    /**
     * If the user's workspace is a V2 workspace, also known as "My Folder", this property will
     * return the GUID of the workspace. Otherwise, it will return undefined.
     */
    myFolderObjectId?: string;
    /**
     * @description
     * The current user’s locale used for date and time format. The format locale is a valid BCP 47 tag.
     * For more information about the BCP 47, please visit:
     * https://www.rfc-editor.org/rfc/bcp/bcp47.txt
     * Currently, the value is the same with currentLanguageLocale. In the future,
     * we will add regional setting in user settings and this value will be aligned with regional setting
     * and might be different from currentLanguageLocale.
     */
    currentFormatLocale: string;
}
/**
 * @description An interface representing setting properties that are specific to the current workload iframe, as well as properties that can be shared across multiple workloads
 */
interface WorkloadSettings extends WorkloadSettingsContextAgnostic {
    /**
     * @description instanceId per iframe. Once workload is initialized, an iframe is created per workload per session untill that iframe window is killed by framework at some point.
     */
    instanceId: string;
}

/**
 * @description An interface representing the input configuration of API: openSubfolderPickerDialog
 */
interface OpenSubfolderPickerDialogConfig {
    /**
     * @description The initial subfolder after opening subfolder picker
     */
    initialSubfolderId?: number;
    /**
     * @description Title of subfolder picker
     */
    title: string;
    /**
     * @description Label of confirm button
     */
    confirmButtonText: string;
    /**
     * @description If user could browse across workspaces
     */
    allowSelectWorkspace?: boolean;
    /**
     * @description Label before input box
     */
    semanticInputLabelText?: string;
    /**
     * @description Placeholder of input box
     */
    semanticInputPlaceholder?: string;
    /**
     * @description Model of message bar
     */
    messageBarModel?: MessageBarModel;
    /**
     * @description Types of items that are allowed to be selected. If undefined or empty array, then nothing can be selected.
     */
    allowSelectItemTypes?: ExtendedItemTypeV2[];
    /**
     * @description If multi-selection supported
     */
    allowMultiSelection?: boolean;
    /**
     * @description If creating subfolder is supported in subfolder picker
     */
    showNewButton?: boolean;
    /**
     * @description Pre-selected items, will be display as selected.
     * For each item, provide at least one of id and objectId otherwise it will be ignored.
     */
    preSelectedItems?: PreSelectedItem[];
    /**
     * @description Types of items to be show in the picker. Subfolder is always visible.
     */
    visibleItemTypes?: ExtendedItemTypeV2[];
}
/**
 * @description An interface representing the result of API: openSubfolderPickerDialog
 */
interface OpenSubfolderPickerDialogResult {
    /**
     * @description Result that is returned from picker when picker is closed
     */
    value: SubfolderPickerResult | undefined;
}
/**
 * @description An interface representing the result that is returned from picker when picker is closed
 */
interface SubfolderPickerResult {
    /**
     * @description
     * Selected workspace object id.
     */
    selectedWorkspaceObjectId: string;
    /**
     * @description
     * Selected workspace name.
     */
    selectedWorkspaceName: string;
    /**
     * @description
     * Selected subfolder id. If in the workspace root, the value will be undefined.
     */
    selectedSubfolderId?: number;
    /**
     * @description
     * Selected subfolder path. If in the workspace root, the value will be undefined.
     */
    selectedSubfolderPath?: string;
    /**
     * @description
     * Information of selected items which include subfolders and items.
     * Only available when allowSelectItemTypes has values in OpenSubfolderPickerDialogConfig.
     *
     * @deprecated Use selectedItemsMetadata instead.
     */
    selectedItems?: SubfolderPickerSelectedItems;
    /**
     * @description
     * Information of selected items which include subfolders and items
     * Only available when allowSelectItemTypes has values in OpenSubfolderPickerDialogConfig
     */
    selectedItemsMetadata?: SelectedItemMetadata[];
    /**
     * @description Text of input box
     */
    semanticInputValue?: string;
}
/**
 * @description An interface representing selected items when subfolder picker is allowed to select items.
 */
interface SubfolderPickerSelectedItems {
    /**
     * @description Selected subfolders
     */
    subfolders?: ItemIdentifier[];
    /**
     * @description Selected fabric items
     */
    items?: ItemIdentifier[];
    /**
     * @description Selected dashboards
     */
    dashboards?: ItemIdentifier[];
    /**
     * @description Selected reports
     */
    reports?: ItemIdentifier[];
    /**
     * @description Selected datasets
     */
    datasets?: ItemIdentifier[];
    /**
     * @description Selected datamart type items
     */
    datamarts?: ItemIdentifier[];
    /**
     * @description Selected workbooks
     */
    workbooks?: WorkbookIdentifier[];
    /**
     * @description Selected cdsaModels
     */
    cdsaModels?: ItemIdentifier[];
}
/**
 * @description An interface representing object id(String format) and id(Number format) pair of item
 */
interface ItemIdentifier {
    /**
     * @description Item object id
     */
    objectId?: string;
    /**
     * @description Item id
     */
    id?: number;
}
/**
 * @description An interface representing identifier of workbook
 */
interface WorkbookIdentifier {
    /**
     * @description Workbook id
     */
    id: number;
    /**
     * @description Package id that contains the workbook
     */
    packageId: number;
}
/**
 * @description An interface contains metadata of selected items
 */
interface SelectedItemMetadata {
    /**
     * @description Item id
     */
    id?: number;
    /**
     * @description Item object id
     */
    objectId?: string;
    /**
     * @description Item display name
     */
    displayName?: string;
    /**
     * @description Item type
     */
    type: ExtendedItemTypeV2;
}
/**
 * @description An interface representing pre-selected item
 */
interface PreSelectedItem extends Omit<SelectedItemMetadata, 'displayName'> {
    /**
     * @description If the pre-selected item could be unchecked
     * If false or undefined, will be display as checked and grey out
     * If true, will be displayed as checked and can be un-selected, but currently it is not supported and this case will be ignored.
     */
    canBeUnselected?: boolean;
}

interface SubscriptionInfo {
    subscriptionId: string;
}
interface Unsubscribable {
    unsubscribe: () => void;
}

declare const enum Status {
    /** @deprecated use 'Pending'. */
    Started = "Started",
    Succeeded = "Succeeded",
    Failed = "Failed",
    Cancelled = "Cancelled",
    Pending = "Pending",
    SucceededWithErrors = "SucceededWithErrors",
    FailedWithRemote = "FailedWithRemote",
    Interrupted = "Interrupted"
}

interface DiagnosticTrace {
    name: string;
    properties: Record<string, string | boolean | number | undefined>;
    sanitized?: boolean;
}

/**
 * Feature event that calling service or feature area will supply the below properties.
 * Contact lingluo@microsoft.com for additional guidance on providing values for below properties.
 */
interface FeatureEvent {
    originatingService: string;
    featureName: string;
    activityName: string;
    activityAttributes?: Record<string, string | boolean | number>;
    activityStatus?: Status;
    resultCode?: string;
    premiumCapacityId?: string;
    operationEndTime?: string;
    operationStartTime?: string;
    durationMs?: number;
    correlationId?: string;
}

/**
 * Options to control event logging
 */
interface EventOptions {
    /**
     * Declares whether it is possible for the current event to be logged if the user is not signed in
     */
    allowNoUserContext?: boolean;
    /**
     * Normalize event and feature names to replace unsupported hierarchy separators such as ":" and "." with "-".
     * For eg: "PBI.Event.SubEvent" is converted to "PBI-Event-SubEvent"
     */
    normalizeHierarchicalSeparators?: boolean;
    /**
     * Declares whether log experiment assignment value in event
     * If you want to log experiment assignment value, please first contact svgersha@microsoft.com
     */
    logExpAssignment?: boolean;
}

/** @internal */
interface LifeCycleEvent<TName = string> {
    name: TName;
    properties?: Record<string, string | boolean>;
}
/** @internal */
type WorkloadLifecycleEvent = LifeCycleEvent<LifecycleEventType>;
/** @internal */
declare enum LifecycleEventType {
    InitSucceeded = 1,
    InitFailed = 2
}
/** @internal */
declare enum WorkloadLoadEventType {
    WorkloadBootstrap = "WorkloadBootstrap"
}
/** @internal */
interface INavigator extends Navigator {
    deviceMemory?: number;
}
/** @internal */
interface INavigatorConnection {
    downlink: number;
    downlinkMax: number;
    effectiveType: string;
    rtt: number;
    saveData: boolean;
    type: string;
}
/**
 * @description A union type of all valid telemetry events
 */
type LoggableEvent = DiagnosticTrace | FeatureEvent;
/** @internal */
interface CdnFallbackEvent {
    workloadName: string;
    timestamp: string;
}
/** @internal */
type LogEventConfig = LoggableEvent & {
    /**
     * Log event options like whether log experiment results
     */
    eventOptions?: EventOptions;
};

/**
 * @description An interface representing action related APIs
 */
interface ActionAPI {
    /**
     * @description
     * Executes an action whose action handler has been registered through `ActionAPI.onAction()`.
     *
     * @param action
     * The action payload
     *
     * @returns
     * The promise of action execution result
     */
    execute<TData, TResult>(action: Action<TData>): Promise<ActionResult<TResult>>;
    /**
     * @description
     * Registers a callback function to handle actions sent to the workload app iframe. This API is expected
     * to be called in `initializeWorker()` or `initializeUI()`.
     *
     * @param callback
     * The callback function
     */
    onAction(callback: (action: WorkloadAction<unknown>) => Promise<unknown>): void;
}

/**
 * @description An interface representing item recent runs related APIs
 */
interface ItemRecentRunsAPI {
    /**
     * @description
     * Opens the item recent run panel.
     *
     * @param config
     * The configuration of the item recent run panel
     *
     * @returns
     * A promise which resolves when the panel opens up
     */
    open(config: OpenItemRecentRunsConfig): Promise<OpenUIResult>;
}

/**
 * @description An interface representing item settings related APIs
 */
interface ItemSettingsAPI {
    /**
     * @description
     * Opens the item settings panel.
     *
     * @param config
     * The configuration of the item settings panel
     *
     * @returns
     * A promise which resolves when the item settings panel opens up
     */
    open(config: OpenItemSettingsConfig): Promise<OpenUIResult>;
    /**
     * @description
     * Registers to a callback function invoked when the item settings panel is closed.
     *
     * @param callback
     * The callback function
     */
    onClose(callback: (config: OnCloseItemSettingsContext) => void): void;
    /**
     * @description
     * Adjusts the height of the extesnion iframe embedded in "Item Settings -> About".
     *
     * @param config
     * Includes iframe height to set (in pixels, example: '10px')
     */
    setIframeDimensions(config: {
        iframeHeight: string;
        itemId: string;
    }): void;
}

/** @internal */
interface AuthAPI {
    /**
     * @description
     * Gets an AAD access token.
     *
     * @param scopes
     * The scope of the access token. If not provided, a token for Power BI Service will be returned by default.
     * @param forceRefresh
     * Applies only when client side auth is enabled. It forces the browser to request a new token instead of reusing the local cache.
     * See more at https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-pass-custom-state-authentication-request
     *
     * @returns
     * A promise which resolves when the access token is fetched
     */
    getAccessToken(scopes?: string[], forceRefresh?: boolean): Promise<AccessToken>;
}

/**
 * @description An interface representing datahub related APIs
 */
interface DatahubAPI {
    /**
     * @description
     * Opens the datahub compact view dialog
     *
     * @param config
     * The configuration of the datahub selector dialog, including:
     * - `displayColumns` – An array - the columns we allow in the table - optional with default value.
     * - `dialogTitleLocalized` – (Deprecated) String - The title of the dialog (localization key) - optional.
     * - `dialogDescriptionLocalized` – String - The sub-title of the dialog (localization key) - optional.
     * - `supportedTypes` - An array of `DatahubItemType` what to show at all - optional.
     * - `contextInfo` – The context object - where the user is - what workspace is in use, is it my workspace, etc - optional.
     * - `datahubTableHost` – String - Where the Datahub is hosted (L1, Create Report, Notebook, Shortcut)
     * - `multiSelectionEnabled` - Boolean - Multi-selection of items is possible when this flag is enabled - by default the value is 'false'.
     * - `datahubButtonUserChoicesByType`: It's a dictionary where the key is DatahubItemType and the value is collection of DatahubButton[]
     *      `DatahubButton`:
     *           - `actionId`: String - the ID of the action (for example: “CreateReport” or “ConnectToSQL”)
     *           - `nameLocalized` – The name of the button for example “Create a report” (localization key - should be added)
     *           - `tooltipLocalized`: The tooltip when hover on the button  (localization key - should be added), optional
     *           - `isAllowed`: A callback function, which gets Item and returns a Boolean (whether to allow this action or not) – this function called when the user selected any item from the datahub list, optional
     *           - `isDisable`: A callback function, which gets Item and returns a Boolean (whether to marks the button as a disabled one or not) – this function called when the user selected any item from the datahub list, optional
     * - `shouldIncludeFuncByItemType`: A dictionary where the key is `DatahubItemType` and the value is callback function - the function gets the 'item' as input and defines whether to display the item in the table or not (filtering in the client), for example, showing only datasets with read permission - optional.
     * - `filterDatahubByTypes` - An array of strings - will open the datahub compact view filter by the values in the array.
     * - `learnMorelink` - includes a string `linkText` and link url `linkUrl`. The default behavior is that learn more link is not visible, until the host customize it. Optional.
     * - `dialogAdditionalInfo` - String - Additional inforamation content. Will appear only if `learnMorelink` is defined, optional.
     *
     * @returns
     * A promise which resolves when the dialog is closed - the result is `DatahubSelectorDialogResult` object which including:
     * - `selectedDatahubItemObjectIds` - The selected Item object Ids from the list.
     * - `buttonUserChoiceDatahub` - The selected button (`DatahubButton`) - provided from the config
     */
    openDialog(config: DatahubSelectorDialogConfig): Promise<DatahubSelectorDialogResult>;
    /**
     * @description
     * Opens the datahub wizard dialog
     *
     * @param config
     * The configuration of the datahub wizard dialog, including:
     * - `datahubCompactViewPageConfig`: DatahubCompactViewPageConfig
     *      `DatahubCompactViewPageConfig`:
     *         - `headerDialogConfig`: DatahubHeaderDialogConfig
     *              `DatahubHeaderDialogConfig`:
     *                  - `dialogTitleLocalized`: String
     *                  - `dialogTitle`: String
     *                  - `dialogAdditionalInfo`: String
     *                  - `dialogDescriptionLocalized`: String
     *                  - `dialogDescription`: String
     *                  - `learnMorelink`: String
     *         - `datahubCompactViewConfig`:  DatahubCompactViewConfig
     *              `DatahubCompactViewConfig`:
     *                  - `displayColumns` – An array - the columns we allow in the table - optional with default value.
     *                  - `dialogTitleLocalized` – (Deprecated) String - The title of the dialog (localization key) - optional.
     *                  - `dialogDescriptionLocalized` – String - The sub-title of the dialog (localization key) - optional.
     *                  - `supportedTypes` - An array of `DatahubItemType` what to show at all - optional.
     *                  - `contextInfo` – The context object - where the user is - what workspace is in use, is it my workspace, etc - optional.
     *                  - `datahubTableHost` – String - Where the Datahub is hosted (L1, Create Report, Notebook, Shortcut)
     *                  - `multiSelectionEnabled` - Boolean - Multi-selection of items is possible when this flag is enabled - by default the value is 'false'.
     *                  - `datahubButtonUserChoicesByType`: It's a dictionary where the key is DatahubItemType and the value is collection of DatahubButton[]
     *                       `DatahubButton`:
     *                            - `actionId`: String - the ID of the action (for example: “CreateReport” or “ConnectToSQL”)
     *                            - `nameLocalized` – The name of the button for example “Create a report” (localization key - should be added)
     *                            - `tooltipLocalized`: The tooltip when hover on the button  (localization key - should be added), optional
     *                            - `isAllowed`: A callback function, which gets Item and returns a Boolean (whether to allow this action or not) – this function called when the user selected any item from the datahub list, optional
     *                            - `isDisable`: A callback function, which gets Item and returns a Boolean (whether to marks the button as a disabled one or not) – this function called when the user selected any item from the datahub list, optional
     *                  - `shouldIncludeFuncByItemType`: A dictionary where the key is `DatahubItemType` and the value is callback function - the function gets the 'item' as input and defines whether to display the item in the table or not (filtering in the client), for example, showing only datasets with read permission - optional.
     *                  - `filterDatahubByTypes` - An array of strings - will open the datahub compact view filter by the values in the array.
     *                  - `learnMorelink` - includes a string `linkText` and link url `linkUrl`. The default behavior is that learn more link is not visible, until the host customize it. Optional.
     *                  - `dialogAdditionalInfo` - String - Additional inforamation content. Will appear only if `learnMorelink` is defined, optional.
     * - `oneLakeExplorerPageConfig`: OneLakeExplorerPageConfig
     *       `OneLakeExplorerPageConfig`:
     *         - `headerDialogConfig`: DatahubHeaderDialogConfig
     *              `DatahubHeaderDialogConfig`:
     *                  - `dialogTitleLocalized`: String
     *                  - `dialogTitle`: String
     *                  - `dialogAdditionalInfo`: String
     *                  - `dialogDescriptionLocalized`: String
     *                  - `dialogDescription`: String
     *                  - `learnMorelink`: String
     *         - `onelakeExplorerConfig`: OnelakeExplorerConfig
     *                OnelakeExplorerConfig:
     *                   - `onelakeItem`: OnelakeExplorerItem
     *                          OnelakeExplorerItem:
     *                              - `workspaceObjectId`: String, the selected item workspace object id
     *                              - `itemObjectId`: String, the selected item object id
     *                              - `itemDisplayName`: String, the selected item display name
     *                              - `fabricItemType`: ExtendedItemTypeV2
     *                   - `onelakeExplorerTypes`: OnelakeExplorerType
     *                   - `includeTitleIcon`: Boolean
     *                   - `areRootNodesCheckable`: Boolean
     *                   - `localizedContentTitle`: String
     *         - `submitButtonName`: String, the name is the Submit button
     *
     *
     * @returns
     * A promise which resolves when the dialog is closed - the result is `DatahubWizardDialogResult` object which including:
     * - `datahubCompactViewResult` - An object with `selectedDatahubItem` as key, and the value is collection of SelectedDatahubItem[]
     *      `SelectedDatahubItem`:
     *          - `workspaceObjectId`: String, the selected item workspace object id
     *          - `itemObjectId`: String, the selected item object id
     *          - `datahubItemUI`: BaseDatahubItemUI
     *              `BaseDatahubItemUI`:
     *                  - `itemObjectId`: String, The item object id
     *                  - `displayName`: String, The item display name
     *                  - `workspaceName`: String, The item workspace name
     *                  - `fabricItemType`: String, The item type
     *                  - `description`: String, The item description
     *                  - `lastVisitedTimeUTCEpochTime`: Number, the last time item was visited
     *                  - `datasourceReferences`: DatasourceReference
     *                      - `dsr`: String, the item datasource reference
     *                  - `ownerUsers`: Any, the users owners of the item
     * - `onelakeExplorerResult` - An object representing OnelakeExplorerResult
     *       `OnelakeExplorerResult`:
     *            - `selectedPath`: String, the path selected in the item
     *            - `selectedNodeName`: String, the node selected in the item
     *            - `workspaceObjectId`: String, the selected item workspace object id
     *            - `itemObjectId`: String, the selected item object id
     */
    openDatahubWizardDialog(config: DatahubWizardDialogConfig): Promise<DatahubWizardDialogResult>;
}

/**
 * @description An interface representing dialog related APIs
 */
interface DialogAPI {
    /**
     * @description
     * Opens a dialog that loads the workload app
     *
     * @param config
     * The configuration of the dialog, including the name of the workload app providing the dialog
     * UI, the route to locate the dialog UI in the workload app, the dialog size, etc.
     *
     * @returns
     * A promise which resolves when the dialog is opened
     */
    open(config: OpenDialogConfig): Promise<OpenUIResult>;
    /**
     * @description
     * Opens a message box
     *
     * @param config
     * The configuration of the message box, including the title, body, buttons (up to three), etc.
     *
     * @returns
     * A promise which resolves when the message box is opened
     */
    open(config: OpenMessageBoxConfig): Promise<OpenMessageBoxResult>;
    /**
     * @description
     * Closes dialogs
     *
     * @param config
     * The configuration for closing dialogs, including whether to close all dialogs or just the top dialog, etc.
     *
     * @returns
     * A promise which resolves when dialogs are closed
     */
    close(config?: CloseUIConfig): Promise<CloseUIResult>;
}

/**
 * @description An interface representing error handling related APIs
 */
interface ErrorHandlingAPI {
    /**
     * @description
     * Recognizes specific kinds of failure responses and takes corresponding actions from the host side.
     *
     * Failures will be handled by this API:
     *   - MFA triggered from server side
     *
     * Note that during handling, it may navigate away from current browser window or trigger page refresh.
     *
     * @returns
     * A promise which resolves when the host finishes handling the failure
     */
    handleRequestFailure(response: FailureResponse): Promise<HandleRequestFailureResult>;
    /**
     * @description
     * Handles invalid URL paths
     */
    handleInvalidRoute(config?: HandleInvalidRouteConfig): void;
    /**
     * @description
     * Opens an error dialog
     *
     * @param config
     * The configuration of the error dialog, including title, message, stack trace, etc.
     *
     * @returns
     * A promise which resolves when the dialog is opened
     */
    openErrorDialog(config: OpenErrorConfig): Promise<OpenUIResult>;
}

/**
 * @description An interface representing event related APIs
 */
interface EventAPI {
    /**
     * @description
     * Notify workload host when a new Fabric item event is emitted
     *
     * @param details
     * Details of the emitted event
     */
    emitEvent(details: EventDetails): void;
}

/**
 * @description An interface representing favorite related APIs
 */
interface FavoriteAPI {
    /**
     * @description
     * Favorites an item identified by its object ID.
     *
     * @param input - The input containing the object ID of the item to be favorited.
     * @returns A promise that resolves with the output of the favorite operation.
     */
    favoriteItem(input: FavoriteItemInput): Promise<FavoriteItemOutput>;
    /**
     * @description
     * Unfavorites an item identified by its object ID.
     *
     * @param input - The input containing the object ID of the item to be unfavorited.
     * @returns A promise that resolves with the output of the unfavorite operation.
     */
    unFavoriteItem(input: UnFavoriteItemInput): Promise<UnFavoriteItemOutput>;
    /**
    * @description
    * Retrieves the favorite state of an item identified by its object ID.
    *
    * @param input - The input containing the object ID of the item.
    * @returns A promise that resolves with the favorite state of the item.
    */
    getItemFavoriteState(input: GetItemFavoriteStateInput): Promise<GetItemFavoriteStateOutput>;
    /**
    * @description
    * Subscribes to changes in the favorite state of an item identified by its object ID.
    *
    * @param input - The input containing the object ID of the item to monitor for changes.
    * @param callback - The callback function invoked when the favorite state of the item changes.
    * @returns A promise that resolves with an object that can be used to unsubscribe from the subscription.
    */
    onItemFavoriteStateChange(input: OnItemFavoriteStateChangeInput, callback: ItemFavoriteStateChangeHandler): Promise<Unsubscribable>;
}

/**
 * @description An interface representing navigation related APIs
 */
interface NavigationAPI {
    /**
     * @description
     * Navigates the target app to the given route path
     *
     * @param target
     * The target app to navigate.
     *   - `host`: the host app
     *   - `workload`: the workload app that calls the API
     * @param route
     * The route path relative to the target app
     *
     * @returns
     * A Promise that resolves to 'true' when navigation succeeds or no navigation, to 'false' when navigation fails,
     * or is rejected on error.
     *
     * @example
     * ```ts
     * // Navigate to `/home` route of the host app
     * await workloadClient.navigation.navigate('host', '/home');
     *
     * // Navigate to `/some/internal/path` route of the workload app
     * await workloadClient.navigation.navigate('workload', '/some/internal/path');
     * ```
     */
    navigate<T extends 'host' | 'workload'>(target: T, route: T extends 'host' ? NavigationHostRoute : NavigationWorkloadRoute): Promise<NavigationResult>;
    /**
     * @description
     * When initializing UI IFrame, the workload app must register a callback to handle Navigation events. When the route of
     * the workload app is required to change, such as from `/some/internal/path` to `/another/internal/path`, the registered
     * callback function will be invoked. In the callback function, the workload app needs to programmatically modify the route
     * of the current UI IFrame and trigger the UI rendering accordingly.
     *
     * @param callback
     * The callback function invoked when a Navigation event is received by the UI iframe
     */
    onNavigate(callback: (event: WorkloadNavigation) => void): void;
    /**
     * @description
     * When initializing page IFrame, the workload app can register a callback to handle BeforeNavigateAway events. Before
     * the workload app transitions away from the current view, the registered callback function will be invoked. In the
     * callback function, the workload app can choose to either allow or deny the navigation. Note that even if the
     * workload app allows the navigation, the destination page may still deny the navigation.
     *
     * @param callback
     * The callback function invoked when the BeforeNavigateAway event is received by the page iframe
     */
    onBeforeNavigateAway(callback: (event: BeforeNavigateAwayData) => Promise<BeforeNavigateAwayResult>): void;
    /**
     * @description
     * When initializing page IFrame, the workload app can register a callback to handle BeforeNavigateAway events. After passing
     * all guard checks and confirming to leave the current page, the registered callback function will be invoked. In the callback
     * function, the workload app can do something before actually leaving the current page, such as performing some clean up.
     *
     * @param callback
     * The callback function invoked when the AfterNavigateAway event is received by the page iframe
     */
    onAfterNavigateAway(callback: (event: AfterNavigateAwayData) => Promise<unknown>): void;
}

/**
 * @description An interface representing notification related APIs
 */
interface NotificationAPI {
    /**
     * @description
     * Shows a notification toast
     *
     * @param config
     * The configuration of showing a notification, including notification type, title, message, dismiss delay, buttons etc.
     *
     * @returns
     * A promise which resolves when the notification toast is scheduled to open
     */
    open(config: OpenNotificationConfig): Promise<OpenNotificationResult>;
    /**
     * @description
     * Dismisses a notification toast
     *
     * @param config
     * The configuration of dismissing a notification, including the id of the notification to dismiss
     */
    hide(config: HideNotificationConfig): void;
}

/**
 * @description An interface representing page related APIs
 */
interface PageAPI {
    /**
     * @description
     * Opens a page that loads the workload app
     *
     * @param config
     * The configuration of the page, including the name of the workload app providing the page
     * UI, the route to locate the page UI in the workload app, etc.
     *
     * @returns
     * A promise which resolves when the page is opened. Note that if the page opening is denied
     * due to failed navigation guard checks, a rejection statement will be returned.
     */
    open(config: OpenPageConfig): Promise<OpenUIResult>;
}

/**
 * @description An interface representing panel related APIs
 */
interface PanelAPI {
    /**
     * @description
     * Opens a panel that loads the workload app
     *
     * @param config
     * The configuration of the panel, including the name of the workload app providing the panel
     * UI, the route to locate the panel UI in the workload app, the panel size, etc.
     *
     * @returns
     * A promise which resolves when the panel is opened
     */
    open(config: OpenPanelConfig): Promise<OpenUIResult>;
    /**
     * @description
     * Closes panels
     *
     * @param config
     * The configuration for closing panels, including whether to close all panels or just the top panel, etc.
     *
     * @returns
     * A promise which resolves when panels are closed
     */
    close(config?: CloseUIConfig): Promise<CloseUIResult>;
}

/**
 * @description An interface representing permission related APIs
 */
interface PermissionAPI {
    /**
     * @description
     * Checks if the current user has specific permissions on the target item.
     *
     * @param input
     * `CheckPermissionsOfItemInput` including:
     *   - `itemType`: The item type of the target item.
     *   - `itemObjectId`: The object Id of the target item.
     *   - `permissions`: The core permissions to check if user has.
     *   - `itemPermissions`: The customized permissions to check if user has.
     *
     * @returns
     * The check result
     */
    checkPermissionsOfItem(input: CheckPermissionsOfItemInput): Promise<CheckPermissionsOfItemResult>;
    /**
     * @description
     * Checks if the current user has specific permissions on the target workspace.
     *
     * @param input
     * `CheckPermissionsOfWorkspaceInput` including:
     *   - `workspaceObjectId`: The object Id of the target workspace.
     *   - `permissions`: The permissions to check if user has.
     *
     * @returns
     * The check result.
     */
    checkPermissionsOfWorkspace(input: CheckPermissionsOfWorkspaceInput): Promise<CheckPermissionsOfWorkspaceResult>;
    /**
     * @description
     * Gets permissions of the current user on the target item.
     *
     * @param input
     * `GetPermissionsOfItemInput` including:
     *   - `itemType`: The item type of the target item.
     *   - `itemObjectId`: The object Id of the target item.
     *
     * @returns
     * The result is `GetPermissionsOfItemResult` which including:
     *   - `permissions`: The core permissions user has.
     *   - `itemPermissions`: The customized permissions user has. Always return 0 for non-fabric items.
     */
    getPermissionsOfItem(input: GetPermissionsOfItemInput): Promise<GetPermissionsOfItemResult>;
    /**
     * @description
     * Gets permissions of users on the target item.
     *
     * @param input
     * `GetPermissionsOfItemByUserInput` including:
     *   - `itemObjectId`: The object Id of the target item.
     *   - `userObjectIds`: The object Id list of users to query.
     *
     * @returns
     * The result is `GetPermissionsOfItemByUserResult` which including:
     *   - `permissionUsers`: The list to map users being queried and their permissions to the item.
     */
    getPermissionsOfItemByUser(input: GetPermissionsOfItemByUserInput): Promise<GetPermissionsOfItemByUserResult>;
    /**
     * @description
     * Gets permissions of the current user on the target workspace.
     *
     * @param input
     * `GetPermissionsOfWorkspaceInput` including:
     *   - `workspaceObjectId`: The object Id of the target workspace.
     *
     * @returns
     * The result is `GetPermissionsOfWorkspaceResult` which including:
     *   - `permissions`: The permissions user has.
     */
    getPermissionsOfWorkspace(input: GetPermissionsOfWorkspaceInput): Promise<GetPermissionsOfWorkspaceResult>;
    /**
     * @description
     * Opens the item sharing dialog.
     *
     * @param config
     * `ItemSharingDialogConfig` including:
     *   - `itemType`: The item type of the target item.
     *   - `itemObjectId`: The object Id of the target item.
     *   - `linkSharing`: If this flag is true, open link sharing dialog, otherwise open direct sharing dialog. - Optional with default value true
     *   - `preSelectedUserPrincipals`: A list of user principal names to grant access by default. - Optional. Only supported in direct sharing dialog
     *   - `defaultShareOptions`: A list of share option names to be checked by default. - Optional. Only supported in direct sharing dialog.
     *      Note that empty array is different from undefined and will uncheck all share options
     *   - `customizedTitle`: A customized title to replace grant access title in sharing literals. Needs to be localized. - Optional and only supported in direct sharing dialog
     */
    openItemSharingDialog(config: ItemSharingDialogConfig): void;
    /**
     * @description
     * Opens the item sharing dialog with sharing result(Currently only link sharing dialog supports to return sharing result).
     *
     * @param config
     * `ItemSharingDialogConfig` including:
     *   - `itemType`: The item type of the target item.
     *   - `itemObjectId`: The object Id of the target item.
     *   - `linkSharing`: If this flag is true, open link sharing dialog, otherwise open direct sharing dialog. - Optional with default value true
     *   - `preSelectedUserPrincipals`: A list of user principal names to grant access by default. - Optional. Only supported in direct sharing dialog
     *   - `defaultShareOptions`: A list of share option names to be checked by default. - Optional. Only supported in direct sharing dialog.
     *      Note that empty array is different from undefined and will uncheck all share options
     *   - `customizedTitle`: A customized title to replace grant access title in sharing literals. Needs to be localized. - Optional and only supported in direct sharing dialog
     *
     * @returns
     * The result is `SharingResult` which including:
     *   - `sharingCompleted`: If the sharing has been completed successfully.
     *   - `scope`: If the sharing is tenant scope sharing, specific users sharing or existing access(no new sharing)
     *   - `sharedUsers`: object id of shared users
     *   - `permissions`: shared core permissions
     *   - `itemPermissions`: shared customized permissions
     *   - `relatedSharingPermissions`: shared permissions of related item
     */
    openItemSharingDialogWithResult(config: ItemSharingDialogConfig): Promise<SharingResult>;
    /**
     * @description
     * Checks if sharing is enable for current user on this item.
     *
     * @param input
     * `CheckItemSharingEnabledInput` including:
     *   - `itemType`: The item type of the target item.
     *   - `itemObjectId`: The object Id of the target item.
     *
     * @returns
     * The check result
     */
    checkItemSharingEnabled(input: CheckItemSharingEnabledInput): Promise<CheckItemSharingEnabledResult>;
    /**
     * @description
     * Gets shareable permissions of the specific item type.
     *
     * @param input
     * `GetItemTypeShareablePermissionsInput` including:
     *   - `itemType`: The item type.
     *
     * @returns
     * The result is `GetItemTypeShareablePermissionsResult` which including:
     *   - `corePermissions`: The shareable core permissions of this item type.
     *   - `itemPermissions`: The shareable item permissions of this item type.
     */
    getItemTypeShareablePermissions(input: GetItemTypeShareablePermissionsInput): Promise<GetItemTypeShareablePermissionsResult>;
}

/**
 * @description An interface representing settings related APIs
 */
interface SettingsAPI {
    /**
     * @description
     * The workload app can use this API to get its settings, such as feature switches, locale, etc.
     * Some of these settings might be dynamic as users may switch to a different language without
     * refreshing the app. Another API, settings.onChange(), is available to notify the workload app
     * whenever any of these settings are changed.
     *
     * @returns
     * A promise which resolves when the settings is fetched.
     */
    get(): Promise<WorkloadSettings>;
    /**
     * @description
     * Registers a callback function to be notified whenever any settings are changed.
     *
     * @param callback
     * The callback function invoked when any workload settings are changed
     */
    onChange(callback: (settings: WorkloadSettings) => void): void;
}

/**
 * @description An interface representing state management related APIs
 */
interface StateAPI {
    /**
     * @description
     * A common plain object which is shared across all the iframes, including pages, dialogs, panels, and workers,
     * within an workload scope. It can store any type of data, including complex types which cannot be serialized,
     * such as a redux store, a Promise, or a DOMElement.
     */
    get sharedState(): Record<string, any>;
}

/**
 * @description An interface representing subfolder related APIs
 */
interface SubfolderAPI {
    /**
     * @description
     * Opens the subfolder picker dialog.
     *
     * @param config
     * `OpenSubfolderPickerDialogConfig` including:
     *   - `initialSubfolderId`: The id of the subfolder that the picker initially displays. - Optional
     *   - `title`: The text to be displayed as the title.
     *   - `confirmButtonText`: The text to be displayed on the confirm button.
     *   - `allowSelectWorkspace`: If to show the workspace list for switching workpsace. - Optional with default value false
     *   - `semanticInputLabelText`: The text to be displayed as the label of semantic input box, if is undefiend or empty string, the semantic input box will be hidden. - Optional
     *   - `semanticInputPlaceholder`: The text id of the target workspace. - Optional
     *   - `messageBarModel`: The config of message bar, including message text, type and link. - Optional
     *   - `allowSelectItemTypes`: The item types could be selected in the dialog, if is undefined or empty, the result will contain the id of the currently browsering subfolder. - Optional
     *   - `allowMultiSelection`: If allow select multiple items. - Optional with default value false
     *   - `showNewButton`: If to show the new button. - Optional with default value false
     *
     * @returns
     * A promise which resolves when the subfolder picker dialog closed
     * If confirm button is clicked, the value will be `SubfolderPickerResult` which including:
     *   - `selectedWorkspaceObjectId`: The objectId of the selected workspace. Available when `allowSelectWorkspace` is true.
     *   - `selectedSubfolderId`: The id of the selected subfolder. Available when `allowSelectItemTypes` is undefined or empty.
     *   - `selectedItems`: The unique identifiers of the selected items. Available when `allowSelectItemTypes` is not undefined or empty.
     *   - `semanticInputValue`: The input value. Available when `semanticInputLabelText` is not undefined or empty.
     * If cancel button is clicked, the value will be `undefined`.
     */
    openSubfolderPickerDialog(config: OpenSubfolderPickerDialogConfig): Promise<OpenSubfolderPickerDialogResult>;
}

/**
 * @description The value of an CSS token
 */
type TokenValue = string | number;
/**
 * @description CSS tokens represented in a key-value pair format
 */
type Tokens = {
    [tokenName: string | TokenName]: TokenValue;
};
/**
 * @description The interface provides options for configuring themes, including CSS tokens and accent colors, among other settings.
 */
interface ThemeConfiguration {
    /**
     * @description The name of the theme
     */
    name: string;
    /**
     * @description CSS tokens
     */
    tokens: Tokens;
    /**
     * @description Accent colors for the current theme
     */
    accentColors: BrandVariants;
    /**
     * @description Color Scheme to apply
     */
    colorScheme: string;
}
/**
 * @description An enum of all valid CSS token names
 */
declare const enum TokenName {
    ColorNeutralBackground1 = "colorNeutralBackground1",
    ColorNeutralBackground1Pressed = "colorNeutralBackground1Pressed",
    ColorNeutralBackgroundDisabled = "colorNeutralBackgroundDisabled",
    ColorNeutralBackground3 = "colorNeutralBackground3",
    ColorNeutralBackground4 = "colorNeutralBackground4",
    ColorNeutralBackground1Hover = "colorNeutralBackground1Hover",
    ColorNeutralForeground1Hover = "colorNeutralForeground1Hover",
    ColorNeutralForeground1 = "colorNeutralForeground1",
    ColorNeutralForeground2 = "colorNeutralForeground2",
    ColorNeutralForegroundDisabled = "colorNeutralForegroundDisabled",
    ColorCompoundBrandForeground1Hover = "colorCompoundBrandForeground1Hover",
    ColorBrandForeground1 = "colorBrandForeground1",
    ColorBrandBackground = "colorBrandBackground",
    ColorCompoundBrandStroke = "colorCompoundBrandStroke"
}

declare const THEME_ATTRIBUTE = "data-theme";
declare const STYLE_ELEMENT_ID = "theme-styles";
/**
 * @description The interface provides configurable options for the theme provider.
 */
interface ThemeProviderOptions {
    /**
     * @description Indicates whether the theme is enabled globally
     */
    enableThemeGlobally: boolean;
}
/**
 * CssVariableThemeProvider loads themes from json. Writes json themes into the dom as css variables. It can return the theme object to consumers
 */
declare class CssVariableThemeProvider {
    private styleElement;
    constructor();
    provideTheme(theme: ThemeConfiguration, options?: ThemeProviderOptions): void;
    enableThemeGlobally(themeName: string): void;
    private createStyleSheet;
    private buildCSSVarList;
    private buildCSSColorScheme;
}

/**
 * @description An interface representing theme related APIs
 */
interface ThemeAPI {
    /**
     * @description
     * Gets the current theme in use by the application. This theme contains the color, font,
     * depth, border radius, etc. values needed to style the workload to look consistent with
     * the rest of the platform.
     *
     * @returns
     * A promise which resolves when the theme is available
     */
    get(): Promise<ThemeConfiguration>;
    /**
     * @description
     * Registers to a callback function to respond to updates to the theme of the application
     *
     * @param callback
     * The callback function invoked when the theme of the application is changed
     */
    onChange(callback: (theme: ThemeConfiguration) => void): void;
}

/**
 * @description
 * Every workload app needs to support being loaded in two modes:
 * - **UI mode**: App in UI mode is loaded in visible IFrames and listens for its own route changes
 * to render corresponding UI components, including pages, panels, dialogs, and so on.
 * - **Worker mode**: App in worker mode runs in an invisible IFrame, which is mainly used to receive
 * commands sent from the outside world and respond to them.
 *
 * The bootstrap() method is to simplify the initialization steps. The bootstrap() method internally
 * detects whether the current App is loaded in UI mode or worker mode, and then call the appropriate
 * initialization method (initializeUI vs. initializeWorker). After the initialization is complete,
 * it notifies Fabric micro-frontend framework of the initialization success or failure.
 *
 * @returns promise which resolves when the initialization is complete.
 */
declare function bootstrap(config: {
    initializeWorker: (params: InitParams) => Promise<void>;
    initializeUI: (params: InitParams) => Promise<void>;
    workloadHostWindow?: Window;
}): Promise<void>;

/**
 * @description APIs that are available for the workload application
 */
interface WorkloadClientAPI$1 {
    /**
     * @description Action related APIs
     */
    action: ActionAPI;
    /**
     * @description Aritfact recent runs related APIs
     */
    itemRecentRuns: ItemRecentRunsAPI;
    /**
     * @description Aritfact settings related APIs
     */
    itemSettings: ItemSettingsAPI;
    /** @internal */
    auth: AuthAPI;
    /**
     * @description Datahub related APIs
     */
    datahub: DatahubAPI;
    /**
     * @description Dialog related APIs
     */
    dialog: DialogAPI;
    /**
     * @description Error handling related APIs
     */
    errorHandling: ErrorHandlingAPI;
    /**
     * @description Event related APIs
     */
    event: EventAPI;
    /**
     * @description FavoriteItem Relate APIs
     */
    favorite: FavoriteAPI;
    /**
     * @description Navigation related APIs
     */
    navigation: NavigationAPI;
    /**
     * @description Notification related APIs
     */
    notification: NotificationAPI;
    /**
     * @description Page related APIs
     */
    page: PageAPI;
    /**
     * @description Panel related APIs
     */
    panel: PanelAPI;
    /**
     * @description Permission related APIs
     */
    permission: PermissionAPI;
    /**
     * @description Settings related APIs
     */
    settings: SettingsAPI;
    /**
     * @description State management related APIs
     */
    state: StateAPI;
    /**
     * @description Subfolder related APIs
     */
    subfolder: SubfolderAPI;
    /**
     * @description Theme related APIs
     */
    theme: ThemeAPI;
}

declare class _ErrorHandlingClient {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    registerUnhandledExceptionHandler(config: UnhandledExceptionHandlerConfig): void;
}

declare class _InteractionClient {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    postDOMEvent(config: PostDOMEventConfig): void;
    onResetFocus(callback: (config: WorkloadResetFocusConfig) => void): void;
    onQueryDomRect(callback: (config: GetWorkloadDOMRectConfig) => Promise<GetWorkloadDOMRectResult>): void;
}

/** @internal */
declare class _PerformanceItemsClient {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    private cursor;
    private performanceItems;
    private performanceObserver;
    init(): void;
    private pushPerformanceItems;
    private checkSize;
    private pickPerformanceItems;
    private convertPerformanceItem;
}

declare class _TelemetryClient {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    logEvent(event: DiagnosticTrace | FeatureEvent, eventOptions?: EventOptions): void;
    postLifecycleEvent(event: WorkloadLifecycleEvent): void;
    postCdnFallbackEvent(event: CdnFallbackEvent): void;
}

/** @internal */
declare class _WorkerClient {
    private readonly metaFactory;
    private readonly config;
    private _workerIFrameState?;
    constructor(metaFactory: () => Readonly<WorkloadMeta>, config: WorkloadClientConfig);
    get workIFrameState(): Promise<Record<string, any>>;
    private sleep;
    private getState;
}

/** @internal */
declare class ActionClient implements ActionAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    execute<TData, TResult>(action: Action<TData>): Promise<ActionResult<TResult>>;
    onAction(handler: (action: WorkloadAction<unknown>) => Promise<unknown>): void;
}

/** @internal */
declare class ItemRecentRunsClient implements ItemRecentRunsAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    open(config: OpenItemRecentRunsConfig): Promise<OpenUIResult>;
}

/** @internal */
declare class ItemSettingsClient implements ItemSettingsAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    open(config: OpenItemSettingsConfig): Promise<OpenUIResult>;
    onClose(callback: (config: OnCloseItemSettingsContext) => void): void;
    setIframeDimensions(config: {
        iframeHeight: string;
        itemId: string;
    }): void;
}

/** @internal */
declare class AuthClient implements AuthAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    getAccessToken(scopes?: string[] | undefined, forceRefresh?: boolean | undefined): Promise<AccessToken>;
}

/** @internal */
declare class DatahubClient implements DatahubAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    openDialog(config: DatahubSelectorDialogConfig): Promise<DatahubSelectorDialogResult>;
    openDatahubWizardDialog(config: DatahubWizardDialogConfig): Promise<DatahubWizardDialogResult>;
}

/** @internal */
declare class DialogClient implements DialogAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    open(config: OpenDialogConfig): Promise<OpenUIResult>;
    open(config: OpenMessageBoxConfig): Promise<OpenMessageBoxResult>;
    close(config?: CloseUIConfig): Promise<CloseUIResult>;
}

/** @internal */
declare class ErrorHandlingClient implements ErrorHandlingAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    handleRequestFailure(response: FailureResponse): Promise<HandleRequestFailureResult>;
    handleInvalidRoute(config?: HandleInvalidRouteConfig): void;
    openErrorDialog(config: OpenErrorConfig): Promise<OpenUIResult>;
}

/** @internal */
declare class EventClient implements EventAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    emitEvent(details: EventDetails): void;
}

/** @internal */
declare class NavigationClient implements NavigationAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    navigate<T extends 'host' | 'workload'>(target: T, route: T extends 'host' ? NavigationHostRoute : NavigationWorkloadRoute): Promise<NavigationResult>;
    onNavigate(callback: (navigation: WorkloadNavigation) => void): void;
    onBeforeNavigateAway(callback: (leaveData: BeforeNavigateAwayData) => Promise<BeforeNavigateAwayResult>): void;
    onAfterNavigateAway(callback: (leaveEndData: AfterNavigateAwayData) => Promise<unknown>): void;
}

/** @internal */
declare class NotificationClient implements NotificationAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    open(config: OpenNotificationConfig): Promise<OpenNotificationResult>;
    hide(config: HideNotificationConfig): void;
}

/** @internal */
declare class PageClient implements PageAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    open(config: OpenPageConfig): Promise<OpenUIResult>;
}

/** @internal */
declare class PanelClient implements PanelAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    open(config: OpenPanelConfig): Promise<OpenUIResult>;
    close(config?: CloseUIConfig): Promise<CloseUIResult>;
}

/** @internal */
declare class PermissionClient implements PermissionAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    checkPermissionsOfItem(input: CheckPermissionsOfItemInput): Promise<CheckPermissionsOfItemResult>;
    checkPermissionsOfWorkspace(input: CheckPermissionsOfWorkspaceInput): Promise<CheckPermissionsOfWorkspaceResult>;
    getPermissionsOfItem(input: GetPermissionsOfItemInput): Promise<GetPermissionsOfItemResult>;
    getPermissionsOfItemByUser(input: GetPermissionsOfItemByUserInput): Promise<GetPermissionsOfItemByUserResult>;
    getPermissionsOfWorkspace(input: GetPermissionsOfWorkspaceInput): Promise<GetPermissionsOfWorkspaceResult>;
    openItemSharingDialog(config: ItemSharingDialogConfig): void;
    openItemSharingDialogWithResult(config: ItemSharingDialogConfig): Promise<SharingResult>;
    checkItemSharingEnabled(input: CheckItemSharingEnabledInput): Promise<CheckItemSharingEnabledResult>;
    getItemTypeShareablePermissions(input: GetItemTypeShareablePermissionsInput): Promise<GetItemTypeShareablePermissionsResult>;
}

/** @internal */
declare class SettingsClient implements SettingsAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    get(): Promise<WorkloadSettings>;
    onChange(callback: (settings: WorkloadSettings) => void): void;
}

/** @internal */
declare class StateClient implements StateAPI {
    private readonly metaFactory;
    private readonly config;
    private _sharedState?;
    constructor(metaFactory: () => Readonly<WorkloadMeta>, config: WorkloadClientConfig);
    get sharedState(): Record<string, any>;
}

/** @internal */
declare class SubfolderClient implements SubfolderAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    openSubfolderPickerDialog(config: OpenSubfolderPickerDialogConfig): Promise<OpenSubfolderPickerDialogResult>;
}

/** @internal */
declare class ThemeClient implements ThemeAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    get(): Promise<ThemeConfiguration>;
    onChange(callback: (theme: ThemeConfiguration) => void): void;
}

/** @internal */
declare class FavoriteClient implements FavoriteAPI {
    private readonly broker;
    constructor(broker: WorkloadClientMessageBroker);
    favoriteItem(input: FavoriteItemInput): Promise<FavoriteItemOutput>;
    unFavoriteItem(input: UnFavoriteItemInput): Promise<UnFavoriteItemOutput>;
    getItemFavoriteState(input: GetItemFavoriteStateInput): Promise<GetItemFavoriteStateOutput>;
    onItemFavoriteStateChange(input: OnItemFavoriteStateChangeInput, callback: ItemFavoriteStateChangeHandler): Promise<Unsubscribable>;
}

/** @internal */
declare class WorkloadClient implements WorkloadClientAPI$1 {
    private config;
    readonly broker: WorkloadClientMessageBroker;
    /** @internal */
    readonly _errorHandling: _ErrorHandlingClient;
    /** @internal */
    readonly _interaction: _InteractionClient;
    /** @internal */
    readonly _performanceItems: _PerformanceItemsClient;
    /** @internal */
    readonly _telemetry: _TelemetryClient;
    /** @internal */
    readonly auth: AuthClient;
    /** @internal */
    readonly _worker: _WorkerClient;
    readonly action: ActionClient;
    readonly itemRecentRuns: ItemRecentRunsClient;
    readonly itemSettings: ItemSettingsClient;
    readonly dialog: DialogClient;
    readonly datahub: DatahubClient;
    readonly errorHandling: ErrorHandlingClient;
    readonly event: EventClient;
    readonly favorite: FavoriteClient;
    readonly navigation: NavigationClient;
    readonly notification: NotificationClient;
    readonly page: PageClient;
    readonly panel: PanelClient;
    readonly permission: PermissionClient;
    readonly settings: SettingsClient;
    readonly state: StateClient;
    readonly subfolder: SubfolderClient;
    readonly theme: ThemeClient;
    constructor(config?: WorkloadClientConfig);
    private get meta();
}

/** @internal */
declare enum WorkloadMessageType {
    executeAction = "ExecuteAction",
    onAction = "OnAction",
    navigateAsync = "NavigateAsync",
    navigateWorkloadAsync = "NavigateWorkloadAsync",
    onNavigate = "OnNavigate",
    listenLeave = "ListenLeave",
    onLeave = "OnLeave",
    listenLeaveEnd = "ListenLeaveEnd",
    onLeaveEnd = "OnLeaveEnd",
    getAccessToken = "GetAccessToken",
    getSettings = "GetSettings",
    onSettingsChange = "OnSettingsChange",
    openNotification = "OpenNotification",
    hideNotification = "hideNotification",
    openPage = "OpenPage",
    openDatahubDialog = "OpenDatahubDialog",
    openDatahubWizardDialog = "OpenDatahubWizardDialog",
    openDialog = "OpenDialog",
    closeDialog = "CloseDialog",
    openPanel = "OpenPanel",
    closePanel = "ClosePanel",
    logEvent = "LogEvent",
    postLifecycleEvent = "PostLifecycleEvent",
    postDOMEvent = "PostDOMEvent",
    getDOMRect = "GetDOMRect",
    resetFocus = "ResetFocus",
    getTheme = "GetTheme",
    onThemeChange = "OnThemeChange",
    openItemRecentRuns = "OpenItemRecentRuns",
    handleRequestFailure = "HandleRequestFailure",
    handleInvalidRoute = "HandleInvalidRoute",
    openError = "openError",
    emitEvent = "EmitEvent",
    checkPermissionsOfItem = "CheckPermissionsOfItem",
    checkPermissionsOfWorkspace = "CheckPermissionsOfWorkspace",
    getPermissionsOfItem = "GetPermissionsOfItem",
    getPermissionsOfItemByUser = "GetPermissionsOfItemByUser",
    getPermissionsOfWorkspace = "GetPermissionsOfWorkspace",
    checkItemSharingEnabled = "CheckItemSharingEnabled",
    getItemTypeShareablePermissions = "GetItemTypeShareablePermissions",
    openItemSharingDialog = "OpenItemSharingDialog",
    openItemSharingDialogWithResult = "OpenItemSharingDialogWithResult",
    openItemSettings = "OpenItemSettings",
    onCloseItemSettings = "onCloseItemSettings",
    resizeIframeHeight = "resizeIframeHeight",
    postCdnFallbackEvent = "PostCdnFallbackEvent",
    openSubfolderPickerDialog = "OpenSubfolderPickerDialog",
    favoriteItem = "FavoriteItem",
    unFavoriteItem = "UnFavoriteItem",
    getItemFavoriteState = "GetItemFavoriteState",
    onItemFavoriteStateChange = "OnItemFavoriteUpdate",
    subscribeItemFavoriteStateChange = "SubscribeItemFavoriteUpdate",
    unSubscribeItemFavoriteStateChange = "UnSubscribeItemFavoriteUpdate",
    performanceItemsRequest = "PerformanceItemsRequest"
}
/** @internal */
declare const Messages: {
    readonly executeAction: AsyncWorkloadMessageCreator<Action<unknown>, ActionResult<unknown>, ErrorResult>;
    readonly onAction: AsyncWorkloadMessageCreator<WorkloadAction<unknown>, WorkloadActionResult<unknown>, ErrorResult>;
    readonly navigateAsync: AsyncWorkloadMessageCreator<NavigationHostRoute, NavigationResult, ErrorResult>;
    readonly navigateWorkloadAsync: AsyncWorkloadMessageCreator<NavigationWorkloadRoute, NavigationResult, ErrorResult>;
    readonly onNavigate: With<(props: WorkloadNavigation) => MessageCreatorWithFactory<[iframeId: string], WorkloadNavigation & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly listenLeave: AsyncWorkloadMessageCreator<undefined, BeforeNavigateAwayListenerResult, ErrorResult>;
    readonly onLeave: AsyncWorkloadMessageCreator<BeforeNavigateAwayData, BeforeNavigateAwayResult, ErrorResult>;
    readonly listenLeaveEnd: AsyncWorkloadMessageCreator<undefined, AfterNavigateAwayListenerResult, ErrorResult>;
    readonly onLeaveEnd: AsyncWorkloadMessageCreator<AfterNavigateAwayData, WorkloadActionResult<unknown>, ErrorResult>;
    readonly getAccessToken: AsyncWorkloadMessageCreator<{
        scopes?: string[] | undefined;
        forceRefresh?: boolean | undefined;
    }, AccessToken, AccessTokenErrorResult>;
    readonly getSettings: AsyncWorkloadMessageCreator<undefined, WorkloadSettings, undefined>;
    readonly onSettingsChange: With<(props: WorkloadSettings) => MessageCreatorWithFactory<[iframeId: string], WorkloadSettings & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly openNotification: AsyncWorkloadMessageCreator<OpenNotificationConfig, OpenNotificationResult, undefined>;
    readonly hideNotification: With<(props: HideNotificationConfig) => MessageCreatorWithFactory<[iframeId: string], HideNotificationConfig & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly openPage: AsyncWorkloadMessageCreator<OpenPageConfig, OpenUIResult, undefined>;
    readonly openDatahubDialog: AsyncWorkloadMessageCreator<DatahubSelectorDialogConfig, DatahubSelectorDialogResult, undefined>;
    readonly openDatahubWizardDialog: AsyncWorkloadMessageCreator<DatahubWizardDialogConfig, DatahubWizardDialogResult, undefined>;
    readonly openDialog: AsyncWorkloadMessageCreator<OpenDialogConfig | OpenMessageBoxConfig, OpenUIResult | OpenMessageBoxResult, undefined>;
    readonly closeDialog: AsyncWorkloadMessageCreator<CloseUIConfig, CloseUIResult, undefined>;
    readonly openPanel: AsyncWorkloadMessageCreator<OpenPanelConfig, OpenUIResult, undefined>;
    readonly closePanel: AsyncWorkloadMessageCreator<CloseUIConfig, CloseUIResult, undefined>;
    readonly logEvent: With<(props: LogEventConfig) => MessageCreatorWithFactory<[iframeId: string], LogEventConfig & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly postLifecycleEvent: With<(props: WorkloadLifecycleEvent) => MessageCreatorWithFactory<[iframeId: string], WorkloadLifecycleEvent & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly postDOMEvent: With<(props: PostDOMEventConfig) => MessageCreatorWithFactory<[iframeId: string], PostDOMEventConfig & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly getDOMRect: AsyncWorkloadMessageCreator<GetWorkloadDOMRectConfig, GetWorkloadDOMRectResult, ErrorResult>;
    readonly resetFocus: With<(props: WorkloadResetFocusConfig) => MessageCreatorWithFactory<[iframeId: string], WorkloadResetFocusConfig & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly getTheme: AsyncWorkloadMessageCreator<undefined, ThemeConfiguration, undefined>;
    readonly onThemeChange: With<(props: ThemeConfiguration) => MessageCreatorWithFactory<[iframeId: string], ThemeConfiguration & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly openItemRecentRuns: AsyncWorkloadMessageCreator<OpenItemRecentRunsConfig, OpenUIResult, undefined>;
    readonly openError: AsyncWorkloadMessageCreator<OpenErrorConfig, OpenUIResult, undefined>;
    readonly emitEvent: With<(props: EventDetails) => MessageCreatorWithFactory<[iframeId: string], EventDetails & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly handleRequestFailure: AsyncWorkloadMessageCreator<FailureResponse, HandleRequestFailureResult, undefined>;
    readonly handleInvalidRoute: With<(props: HandleInvalidRouteConfig) => MessageCreatorWithFactory<[iframeId: string], HandleInvalidRouteConfig & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly checkPermissionsOfItem: AsyncWorkloadMessageCreator<CheckPermissionsOfItemInput, CheckPermissionsOfItemResult, ErrorResult>;
    readonly checkPermissionsOfWorkspace: AsyncWorkloadMessageCreator<CheckPermissionsOfWorkspaceInput, CheckPermissionsOfWorkspaceResult, ErrorResult>;
    readonly getPermissionsOfItem: AsyncWorkloadMessageCreator<GetPermissionsOfItemInput, GetPermissionsOfItemResult, ErrorResult>;
    readonly getPermissionsOfItemByUser: AsyncWorkloadMessageCreator<GetPermissionsOfItemByUserInput, GetPermissionsOfItemByUserResult, ErrorResult>;
    readonly getPermissionsOfWorkspace: AsyncWorkloadMessageCreator<GetPermissionsOfWorkspaceInput, GetPermissionsOfWorkspaceResult, ErrorResult>;
    readonly checkItemSharingEnabled: AsyncWorkloadMessageCreator<CheckItemSharingEnabledInput, CheckItemSharingEnabledResult, ErrorResult>;
    readonly getItemTypeShareablePermissions: AsyncWorkloadMessageCreator<GetItemTypeShareablePermissionsInput, GetItemTypeShareablePermissionsResult, ErrorResult>;
    readonly openItemSharingDialog: With<(props: ItemSharingDialogConfig) => MessageCreatorWithFactory<[iframeId: string], ItemSharingDialogConfig & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly openItemSharingDialogWithResult: AsyncWorkloadMessageCreator<ItemSharingDialogConfig, SharingResult, ErrorResult>;
    readonly openItemSettings: AsyncWorkloadMessageCreator<OpenItemSettingsConfig, OpenUIResult, undefined>;
    readonly onCloseItemSettings: With<(props: OnCloseItemSettingsContext) => MessageCreatorWithFactory<[iframeId: string], OnCloseItemSettingsContext & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly resizeIframeHeight: AsyncWorkloadMessageCreator<{
        iframeHeight: string;
        itemId: string;
    }, OpenUIResult, undefined>;
    readonly postCdnFallbackEvent: With<(props: CdnFallbackEvent) => MessageCreatorWithFactory<[iframeId: string], CdnFallbackEvent & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly openSubfolderPickerDialog: AsyncWorkloadMessageCreator<OpenSubfolderPickerDialogConfig, OpenSubfolderPickerDialogResult, ErrorResult>;
    readonly favoriteItem: AsyncWorkloadMessageCreator<FavoriteItemInput, FavoriteItemOutput, ErrorResult>;
    readonly unFavoriteItem: AsyncWorkloadMessageCreator<UnFavoriteItemInput, UnFavoriteItemOutput, ErrorResult>;
    readonly getItemFavoriteState: AsyncWorkloadMessageCreator<GetItemFavoriteStateInput, GetItemFavoriteStateOutput, ErrorResult>;
    readonly onItemFavoriteStateChange: With<(props: ItemFavoriteStateChange & SubscriptionInfo) => MessageCreatorWithFactory<[iframeId: string], ItemFavoriteStateChange & SubscriptionInfo & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly subscribeItemFavoriteStateChange: AsyncWorkloadMessageCreator<OnItemFavoriteStateChangeInput, SubscriptionInfo, undefined>;
    readonly unSubscribeItemFavoriteStateChange: With<(props: SubscriptionInfo) => MessageCreatorWithFactory<[iframeId: string], SubscriptionInfo & WorkloadMessageProps>, {
        type: string;
    }>;
    readonly getPerformanceItems: AsyncWorkloadMessageCreator<GetPerformanceItemsConfig, GetPerformanceItemsResult, ErrorResult>;
};

interface CreateItemPayload extends Omit<CreateItemPayload$1, 'itemType'> {
    itemType: string;
}
interface CreateItemParams extends Omit<CreateItemParams$1, 'payload'> {
    payload: CreateItemPayload;
}
interface ItemV2WithETag extends ItemV2 {
    etag: string;
}
declare type ListItemResult = ItemV2[];
declare type GetItemResult = ItemV2WithETag;
declare type CreateItemResult = ItemV2WithETag;
declare type UpdateItemResult = ItemV2WithETag;
interface DeleteItemResult {
    success?: boolean;
}

interface CancelItemJobResult {
    success?: boolean;
}

interface AcquireAccessTokenParams {
    /**
    * @description Additional scopes to consent when asking for a token, when passing this, the user will be presented with a consent for the scopes passed.
    * This should be used when failing to perform OBO flows in the workload's Backend.
    */
    additionalScopesToConsent?: string[];
    /**
     * @description claims that are returned as a part of msalUiRequiredException in case the token exchange failed due to conditional access policy.
     * If defined, the user will be presented with a window to perform an action according to the conditional access policy configured.
     */
    claimsForConditionalAccessPolicy?: string;
    /**
     * @description If true, the user will be presented with a full consent of the static dependencies of the workload's application as configured in Entra Id (and additionalScopesToConsent parameter will be ignored).
     * This should only be true when needed to avoid presenting the user with consents redundantly.
     */
    promptFullConsent?: boolean;
}
declare enum WorkloadAuthError {
    /**
    * @description Indicates that authentication feature is not available.
    */
    UnsupportedError = 0,
    /**
     * @description Indicates that there was a problem with user interaction.
     */
    UserInteractionFailedError = 1,
    /**
     * @description Indicates that there's a problem with the configuration in the workload for authentication (The redirectUri/Audience does not meet the requirements).
     */
    WorkloadConfigError = 2,
    /**
     * @description Indicates that there was an unknown error when trying to fetch the token.
     */
    UnknownError = 3
}

interface ResolveEndpointParams {
    capacityObjectId: string;
}
interface ResolveEndpointResult {
    backendUrl: string;
}

/**
 * @description This interface is used for error propogation from the workload backend to its frontend in control plane APIs.
 */
interface WorkloadErrorDetails extends WorkloadErrorBasicInformation {
    /**
     * @description Indicates whether the error is permanent or the operation can be retried.
     */
    IsPermanent?: boolean;
    /**
    * @description The error source.
    */
    Source?: WorkloadErrorSource;
    /**
     * @description A list of additional error details.
     */
    MoreDetails?: WorkloadErrorExtendedInformation[];
}
/**
 * @description The source of the error.
 */
declare enum WorkloadErrorSource {
    /**
    * @description Indicates that the error was a system error.
    */
    System = 0,
    /**
    * @description Indicates that the error was a user error.
    */
    User = 1,
    /**
    * @description Indicates that the error was an external error.
    */
    External = 2
}
interface WorkloadErrorBasicInformation {
    /**
     * @description The error code.
     */
    ErrorCode?: string;
    /**
     * @description The error message.
     */
    Message?: string;
    /**
     * @description A list of parameters for formatting a localized message.
     */
    MessageParameters?: string[];
}
interface WorkloadErrorExtendedInformation extends WorkloadErrorBasicInformation {
    /**
     * @description A list of additional parameters specific to the error.
     */
    AdditionalParameters?: NameValuePair[];
}
interface NameValuePair {
    Name?: string;
    Value?: string;
}

interface ItemCrudAPI {
    /**
     *
     * @param params
     */
    createItem(params: CreateItemParams): Promise<CreateItemResult>;
    /**
     *
     * @param params
     */
    getItem(params: GetItemParams): Promise<GetItemResult>;
    /**
     *
     * @param params
     */
    updateItem(params: UpdateItemParams): Promise<UpdateItemResult>;
    /**
     *
     * @param params
     */
    deleteItem(params: DeleteItemParams): Promise<DeleteItemResult>;
}

interface ItemScheduleAPI {
    /**
     *
     * @param objectId
     */
    getItemScheduledJobs(objectId: string): Promise<ItemSchedule>;
    /**
     *
     * @param createItemScheduledJobs
     */
    createItemScheduledJobs(createItemScheduledJobs: CreateItemScheduleParams): Promise<ItemSchedule>;
    /**
     *
     * @param updateItemScheduleParams
     */
    updateItemScheduledJobs(updateItemScheduleParams: UpdateItemScheduleParams): Promise<ItemSchedule>;
    /**
     *
     * @param jobParams
     */
    runItemJob(jobParams: RunItemJobParams): Promise<ItemJobInstance>;
    /**
     *
     * @param jobParams
     */
    cancelItemJob(jobParams: CancelItemJobParams): Promise<CancelItemJobResult>;
    /**
     *
     * @param getHistoryParams
     */
    getItemJobHistory(getHistoryParams: GetItemJobHistoryParams): Promise<ItemJobHistory>;
}

interface AuthClientAPI {
    /**
     * @description
     * Gets an AAD token for the audience provided by the workload.
     *
     * @param params
     * AcquireAccessTokenParams contains:
     * 1) additionalScopesToConsent.
     * 2) claimsForConditionalAccessPolicy.
     * This is used when working with OBO flows.
     * To understand how to work with this parameter, please see https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-on-behalf-of-flow#error-response-example
     * @returns
     * A promise which resolves when the AAD token is fetched.
     */
    acquireAccessToken(params: AcquireAccessTokenParams): Promise<AccessToken>;
}

interface EndpointAPI {
    /**
     *
     * Given the capacityObjectId, the api will return the backend URL of the
     * workload as resolved by the backend endpoint resolution.
     */
    resolveEndpoint(params: ResolveEndpointParams): Promise<ResolveEndpointResult>;
}

type PermissionAPIExposedTo3rdParty = Omit<PermissionAPI, 'openItemSharingDialog' | 'openItemSharingDialogWithResult'>;
type WorkloadClientAPICommonExposedTo3rdParty = Omit<WorkloadClientAPI$1, 'auth' | 'permission'> & {
    permission: PermissionAPIExposedTo3rdParty;
};
interface WorkloadClientAPI extends WorkloadClientAPICommonExposedTo3rdParty {
    itemCrud: ItemCrudAPI;
    itemSchedule: ItemScheduleAPI;
    auth: AuthClientAPI;
    endpoint: EndpointAPI;
}

/**
 * @description create an workload client instance.
 *
 * @returns the workload client instance
 *
 * @param config configuration of the workload client, optional with default config:
 * - `workloadHostWindow` – A window object - Reference to the workload host window, usefully when workloads have nested frames and use the workload client library in the inner frame - optional with default value to window.parent!.
 */
declare function createWorkloadClient(config?: WorkloadClientConfig): WorkloadClientAPI;

declare const CLIENT_VERSION = "0.0.1";

export { type AccessToken, type AccessTokenErrorResult, type AcquireAccessTokenParams, type Action, type ActionAPI, type ActionButton, type ActionName, type ActionResult, type AfterNavigateAwayData, type AfterNavigateAwayListenerResult, type ItemBase, type ItemCreateContext, type ItemCrudAPI, type ItemIdentifier, type ItemJobActionContext, type ItemJobActionResult, type ItemJobData, type ItemJobDetailActionMetadataAttrs, type ItemJobDetailData, type ItemJobDetailSection, type ItemJobHistory, type ItemJobInstance, type ItemJobOwner, ItemJobStatus, type ItemLikeV2, type ItemPermissions, type ItemRecentRunsAPI, type ItemRelation, ItemRelationSettings, type ItemSchedule, type ItemScheduleAPI, type ItemSettingContext, type ItemSettingsAPI, type ItemSharingDialogConfig, type ItemTypeV2, type ItemV2, type ItemV2WithETag, type AuthAPI, type AuthClientAPI, type Base64Image, type BaseDatahubItemUI, type BeforeNavigateAwayData, type BeforeNavigateAwayListenerResult, type BeforeNavigateAwayResult, ButtonType, CLIENT_VERSION, type CancelItemJobParams, type CancelItemJobResult, type CdnFallbackEvent, type CheckItemSharingEnabledInput, type CheckItemSharingEnabledResult, type CheckPermissionsOfItemInput, type CheckPermissionsOfItemResult, type CheckPermissionsOfWorkspaceInput, type CheckPermissionsOfWorkspaceResult, CloseMode, type CloseUIConfig, type CloseUIResult, type CorePermission, type CreateItemParams, type CreateItemPayload, type CreateItemResult, type CreateItemScheduleParams, CssVariableThemeProvider, type DatahubAPI, type DatahubButton, type DatahubCompactViewConfig, type DatahubCompactViewPageConfig, type DatahubConfigurableStrings, type DatahubFilter, DatahubFilterType, type DatahubHeaderDialogConfig, DatahubListPivot, type DatahubPivotDetails, type DatahubSelectorDialogConfig, type DatahubSelectorDialogResult, type DatahubWizardDialogConfig, type DatahubWizardDialogResult, type DatasourceReference, DefaultWorkloadClientConfig, type DeleteItemParams, type DeleteItemResult, type DialogAPI, DialogType, type DialogUIOptions, DisplayColumn, type EndpointAPI, type EnvironmentName, type ErrorCategory, type ErrorDetail, type ErrorDialogButton, type ErrorDialogConfig, ErrorDialogWidth, type ErrorHandlingAPI, ErrorKind, type ErrorOptions, type ErrorResult, ErrorSource, type EventAPI, type EventDetails, ExposeTo, type ExtendedItemType, type ExtendedItemTypeV2, type WorkloadAction, type WorkloadActionHandler, type WorkloadActionResult, WorkloadAuthError, WorkloadClient, type WorkloadClientAPI, type WorkloadClientConfig, WorkloadHostApp, type WorkloadLifecycleEvent, WorkloadLoadEventType, type WorkloadLoadPerformance, WorkloadMessageType, type WorkloadNavigation, type WorkloadResetFocusConfig, type WorkloadRoute, type WorkloadSettings, type WorkloadSettingsContextAgnostic, type FailureResponse, type FavoriteAPI, type FavoriteItemInput, type FavoriteItemInputBase, type FavoriteItemOutput, type FavoriteStateChange, GatewayType, type GetItemJobHistoryParams, type GetItemParams, type GetItemResult, type GetItemTypeShareablePermissionsInput, type GetItemTypeShareablePermissionsResult, type GetWorkloadDOMRectConfig, type GetWorkloadDOMRectResult, type GetItemFavoriteStateInput, type GetItemFavoriteStateOutput, type GetPerformanceItemsConfig, type GetPerformanceItemsResult, type GetPermissionsOfItemByUserInput, type GetPermissionsOfItemByUserResult, type GetPermissionsOfItemInput, type GetPermissionsOfItemResult, type GetPermissionsOfWorkspaceInput, type GetPermissionsOfWorkspaceResult, type HandleInvalidRouteConfig, type HandleRequestFailureWorkloadNextStep, type HandleRequestFailureResult, type HideNotificationConfig, type HostDetails, type HoverCardConfiguration, type IFrameType, type INavigator, type INavigatorConnection, type ImageType, type InitParams, type InjectedDatahubItemUI, type ItemFavoriteStateChange, type ItemFavoriteStateChangeHandler, type LifeCycleEvent, LifecycleEventType, type Link, type ListItemResult, type LogEventConfig, type LoggableEvent, type MessageBarModel, MessageBarType, type MessageBoxOptions, type MessageBoxResult, Messages, type NameValuePair, type NavigationAPI, type NavigationWorkloadRoute, type NavigationHostRoute, type NavigationResult, type NotificationAPI, type NotificationButton, NotificationToastDuration, NotificationType, type OnCloseItemSettingsContext, type OnItemFavoriteStateChangeInput, type OneLakeExplorerPageConfig, type OnelakeExplorerItem, type OnelakeExplorerConfig, type OnelakeExplorerData, type OnelakeExplorerMultiResult, type OnelakeExplorerResult, OnelakeExplorerType, type OpenItemRecentRunsConfig, type OpenItemSettingsConfig, type OpenDialogConfig, type OpenErrorConfig, type OpenMessageBoxConfig, type OpenMessageBoxResult, OpenMode, type OpenNotificationButton, OpenNotificationButtonType, type OpenNotificationConfig, type OpenNotificationResult, type OpenPageConfig, type OpenPanelConfig, type OpenSubfolderPickerDialogConfig, type OpenSubfolderPickerDialogResult, type OpenUIConfig, type OpenUIResult, type PageAPI, type PanelAPI, type PanelUIOptions, type PayloadContentType, PayloadContentTypeEnum, type PermissionAPI, Permissions, type PermissionsOfItemByUser, type PortalAction, type PortalActionResult, type PostDOMEventConfig, PreDefinedEventName, PreDefinedWorkloadAction, type PreSelectedItem, type ProvisionState, ProvisionStateEnum, type ResolveEndpointParams, type ResolveEndpointResult, type RunItemJobParams, STYLE_ELEMENT_ID, type SelectedDatahubItem, type SelectedItemMetadata, type SettingsAPI, SharingLinkType, type SharingResult, type SpecificWorkloadActionHandler, type StateAPI, type StopPerformanceItemConfig, type SubfolderAPI, type SubfolderPickerResult, type SubfolderPickerSelectedItems, type SubscriptionInfo, type SupportedConnection, SupportedDatahubStyleProperties, THEME_ATTRIBUTE, type ThemeAPI, type ThemeConfiguration, type ThemeProviderOptions, TokenName, type TokenValue, type Tokens, type TriItemPermission, type TriRelatedSharingPermissions, type FabricItemTypeV2, TriggerType, type TypeConfig, type UnFavoriteItemInput, type UnFavoriteItemOutput, type UnhandledExceptionHandlerConfig, type Unsubscribable, type UpdateItemParams, type UpdateItemResult, type UpdateItemScheduleParams, type WorkbookIdentifier, type WorkloadErrorBasicInformation, type WorkloadErrorDetails, type WorkloadErrorExtendedInformation, WorkloadErrorSource, bootstrap, createWorkloadClient };

